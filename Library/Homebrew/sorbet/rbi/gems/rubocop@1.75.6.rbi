# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `rubocop` gem.
# Please instead update this file by running `bin/tapioca gem rubocop`.


class Parser::Source::Comment
  include ::RuboCop::Ext::Comment
end

class Parser::Source::Range
  include ::RuboCop::Ext::Range
end

class RuboCop::AST::ProcessedSource
  include ::RuboCop::Ext::ProcessedSource
end

class RuboCop::CLI
  # @return [CLI] a new instance of CLI
  #
  # source://rubocop//lib/rubocop/cli.rb#24
  def initialize; end

  # Returns the value of attribute config_store.
  #
  # source://rubocop//lib/rubocop/cli.rb#22
  def config_store; end

  # Returns the value of attribute options.
  #
  # source://rubocop//lib/rubocop/cli.rb#22
  def options; end

  # Entry point for the application logic. Here we
  # do the command line arguments processing and inspect
  # the target files.
  #
  #
  # @api public
  # @param args [Array<String>] command line arguments
  # @return [Integer] UNIX exit code
  #
  # source://rubocop//lib/rubocop/cli.rb#39
  def run(args = T.unsafe(nil)); end

  private

  # source://rubocop//lib/rubocop/cli.rb#156
  def act_on_options; end

  # source://rubocop//lib/rubocop/cli.rb#198
  def apply_default_formatter; end

  # source://rubocop//lib/rubocop/cli.rb#125
  def execute_runners; end

  # source://rubocop//lib/rubocop/cli.rb#182
  def handle_editor_mode; end

  # @raise [Finished]
  #
  # source://rubocop//lib/rubocop/cli.rb#187
  def handle_exiting_options; end

  # source://rubocop//lib/rubocop/cli.rb#144
  def parallel_by_default!; end

  # source://rubocop//lib/rubocop/cli.rb#80
  def profile_if_needed; end

  # source://rubocop//lib/rubocop/cli.rb#113
  def require_gem(name); end

  # source://rubocop//lib/rubocop/cli.rb#121
  def run_command(name); end

  # source://rubocop//lib/rubocop/cli.rb#174
  def set_options_to_config_loader; end

  # source://rubocop//lib/rubocop/cli.rb#133
  def suggest_extensions; end

  # @raise [OptionArgumentError]
  #
  # source://rubocop//lib/rubocop/cli.rb#137
  def validate_options_vs_config; end
end

module RuboCop::CLI::Command
  class << self
    # Find the command with a given name and run it in an environment.
    #
    # @api private
    #
    # source://rubocop//lib/rubocop/cli/command.rb#10
    def run(env, name); end

    private

    # @api private
    #
    # source://rubocop//lib/rubocop/cli/command.rb#16
    def class_for(name); end
  end
end

class RuboCop::CLI::Command::AutoGenerateConfig < ::RuboCop::CLI::Command::Base
  # @api private
  #
  # source://rubocop//lib/rubocop/cli/command/auto_generate_config.rb#25
  def run; end

  private

  # @api private
  #
  # source://rubocop//lib/rubocop/cli/command/auto_generate_config.rb#107
  def add_formatter; end

  # @api private
  #
  # source://rubocop//lib/rubocop/cli/command/auto_generate_config.rb#115
  def add_inheritance_from_auto_generated_file(config_file); end

  # @api private
  #
  # source://rubocop//lib/rubocop/cli/command/auto_generate_config.rb#111
  def execute_runner; end

  # @api private
  #
  # source://rubocop//lib/rubocop/cli/command/auto_generate_config.rb#136
  def existing_configuration(config_file); end

  # @api private
  #
  # source://rubocop//lib/rubocop/cli/command/auto_generate_config.rb#65
  def line_length_cop(config); end

  # @api private
  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/cli/command/auto_generate_config.rb#53
  def line_length_enabled?(config); end

  # @api private
  #
  # source://rubocop//lib/rubocop/cli/command/auto_generate_config.rb#61
  def max_line_length(config); end

  # @api private
  #
  # source://rubocop//lib/rubocop/cli/command/auto_generate_config.rb#34
  def maybe_run_line_length_cop; end

  # @api private
  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/cli/command/auto_generate_config.rb#73
  def only_exclude?; end

  # @api private
  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/cli/command/auto_generate_config.rb#69
  def options_has_only_flag?; end

  # @api private
  #
  # source://rubocop//lib/rubocop/cli/command/auto_generate_config.rb#153
  def relative_path_to_todo_from_options_config; end

  # @api private
  #
  # source://rubocop//lib/rubocop/cli/command/auto_generate_config.rb#100
  def reset_config_and_auto_gen_file; end

  # @api private
  #
  # source://rubocop//lib/rubocop/cli/command/auto_generate_config.rb#91
  def run_all_cops(line_length_contents); end

  # Do an initial run with only Layout/LineLength so that cops that
  # depend on Layout/LineLength:Max get the correct value for that
  # parameter.
  #
  # @api private
  #
  # source://rubocop//lib/rubocop/cli/command/auto_generate_config.rb#80
  def run_line_length_cop; end

  # @api private
  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/cli/command/auto_generate_config.rb#57
  def same_max_line_length?(config1, config2); end

  # @api private
  #
  # source://rubocop//lib/rubocop/cli/command/auto_generate_config.rb#48
  def skip_line_length_cop(reason); end

  # @api private
  #
  # source://rubocop//lib/rubocop/cli/command/auto_generate_config.rb#142
  def write_config_file(file_name, file_string, rubocop_yml_contents); end
end

RuboCop::CLI::Command::AutoGenerateConfig::AUTO_GENERATED_FILE = T.let(T.unsafe(nil), String)

RuboCop::CLI::Command::AutoGenerateConfig::PHASE_1 = T.let(T.unsafe(nil), String)

RuboCop::CLI::Command::AutoGenerateConfig::PHASE_1_DISABLED = T.let(T.unsafe(nil), String)

RuboCop::CLI::Command::AutoGenerateConfig::PHASE_1_OVERRIDDEN = T.let(T.unsafe(nil), String)

RuboCop::CLI::Command::AutoGenerateConfig::PHASE_1_SKIPPED_ONLY_COPS = T.let(T.unsafe(nil), String)

RuboCop::CLI::Command::AutoGenerateConfig::PHASE_1_SKIPPED_ONLY_EXCLUDE = T.let(T.unsafe(nil), String)

RuboCop::CLI::Command::AutoGenerateConfig::PHASE_2 = T.let(T.unsafe(nil), String)

RuboCop::CLI::Command::AutoGenerateConfig::PLACEHOLDER = T.let(T.unsafe(nil), String)

RuboCop::CLI::Command::AutoGenerateConfig::YAML_OPTIONAL_DOC_START = T.let(T.unsafe(nil), Regexp)

class RuboCop::CLI::Command::Base
  # @api private
  # @return [Base] a new instance of Base
  #
  # source://rubocop//lib/rubocop/cli/command/base.rb#26
  def initialize(env); end

  # @api private
  #
  # source://rubocop//lib/rubocop/cli/command/base.rb#9
  def env; end

  class << self
    # @api private
    #
    # source://rubocop//lib/rubocop/cli/command/base.rb#21
    def by_command_name(name); end

    # @api private
    #
    # source://rubocop//lib/rubocop/cli/command/base.rb#14
    def command_name; end

    # @api private
    #
    # source://rubocop//lib/rubocop/cli/command/base.rb#14
    def command_name=(_arg0); end

    # @api private
    # @private
    #
    # source://rubocop//lib/rubocop/cli/command/base.rb#16
    def inherited(subclass); end
  end
end

class RuboCop::CLI::Command::ExecuteRunner < ::RuboCop::CLI::Command::Base
  include ::RuboCop::Formatter::TextUtil

  # @api private
  #
  # source://rubocop//lib/rubocop/cli/command/execute_runner.rb#16
  def run; end

  private

  # @api private
  #
  # source://rubocop//lib/rubocop/cli/command/execute_runner.rb#85
  def bug_tracker_uri; end

  # @api private
  #
  # source://rubocop//lib/rubocop/cli/command/execute_runner.rb#69
  def display_error_summary(errors); end

  # @api private
  #
  # source://rubocop//lib/rubocop/cli/command/execute_runner.rb#56
  def display_summary(runner); end

  # @api private
  #
  # source://rubocop//lib/rubocop/cli/command/execute_runner.rb#61
  def display_warning_summary(warnings); end

  # @api private
  #
  # source://rubocop//lib/rubocop/cli/command/execute_runner.rb#22
  def execute_runner(paths); end

  # @api private
  #
  # source://rubocop//lib/rubocop/cli/command/execute_runner.rb#91
  def maybe_print_corrected_source; end

  # @api private
  #
  # source://rubocop//lib/rubocop/cli/command/execute_runner.rb#42
  def with_redirect; end
end

RuboCop::CLI::Command::ExecuteRunner::INTEGRATION_FORMATTERS = T.let(T.unsafe(nil), Array)

class RuboCop::CLI::Command::InitDotfile < ::RuboCop::CLI::Command::Base
  # @api private
  #
  # source://rubocop//lib/rubocop/cli/command/init_dotfile.rb#13
  def run; end
end

RuboCop::CLI::Command::InitDotfile::DOTFILE = T.let(T.unsafe(nil), String)

class RuboCop::CLI::Command::LSP < ::RuboCop::CLI::Command::Base
  # @api private
  #
  # source://rubocop//lib/rubocop/cli/command/lsp.rb#11
  def run; end
end

class RuboCop::CLI::Command::ShowCops < ::RuboCop::CLI::Command::Base
  # @api private
  # @return [ShowCops] a new instance of ShowCops
  #
  # source://rubocop//lib/rubocop/cli/command/show_cops.rb#24
  def initialize(env); end

  # @api private
  #
  # source://rubocop//lib/rubocop/cli/command/show_cops.rb#39
  def run; end

  private

  # @api private
  #
  # source://rubocop//lib/rubocop/cli/command/show_cops.rb#89
  def config_lines(cop); end

  # @api private
  #
  # source://rubocop//lib/rubocop/cli/command/show_cops.rb#85
  def cops_of_department(cops, department); end

  # @api private
  #
  # source://rubocop//lib/rubocop/cli/command/show_cops.rb#45
  def print_available_cops; end

  # @api private
  #
  # source://rubocop//lib/rubocop/cli/command/show_cops.rb#68
  def print_cop_details(cops); end

  # @api private
  #
  # source://rubocop//lib/rubocop/cli/command/show_cops.rb#56
  def print_cops_of_department(registry, department, show_all); end

  # @api private
  #
  # source://rubocop//lib/rubocop/cli/command/show_cops.rb#77
  def selected_cops_of_department(cops, department); end
end

class RuboCop::CLI::Command::ShowCops::ExactMatcher < ::Struct
  # @api private
  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/cli/command/show_cops.rb#13
  def match?(name); end

  # Returns the value of attribute pattern
  #
  # @return [Object] the current value of pattern
  def pattern; end

  # Sets the attribute pattern
  #
  # @param value [Object] the value to set the attribute pattern to.
  # @return [Object] the newly set value
  def pattern=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

class RuboCop::CLI::Command::ShowCops::WildcardMatcher < ::Struct
  # @api private
  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/cli/command/show_cops.rb#19
  def match?(name); end

  # Returns the value of attribute pattern
  #
  # @return [Object] the current value of pattern
  def pattern; end

  # Sets the attribute pattern
  #
  # @param value [Object] the value to set the attribute pattern to.
  # @return [Object] the newly set value
  def pattern=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

class RuboCop::CLI::Command::ShowDocsUrl < ::RuboCop::CLI::Command::Base
  # @api private
  # @return [ShowDocsUrl] a new instance of ShowDocsUrl
  #
  # source://rubocop//lib/rubocop/cli/command/show_docs_url.rb#12
  def initialize(env); end

  # @api private
  #
  # source://rubocop//lib/rubocop/cli/command/show_docs_url.rb#18
  def run; end

  private

  # @api private
  #
  # source://rubocop//lib/rubocop/cli/command/show_docs_url.rb#38
  def cops_array; end

  # @api private
  #
  # source://rubocop//lib/rubocop/cli/command/show_docs_url.rb#24
  def print_documentation_url; end

  # @api private
  #
  # source://rubocop//lib/rubocop/cli/command/show_docs_url.rb#42
  def registry_hash; end
end

class RuboCop::CLI::Command::SuggestExtensions < ::RuboCop::CLI::Command::Base
  # @api private
  #
  # source://rubocop//lib/rubocop/cli/command/suggest_extensions.rb#17
  def run; end

  private

  # @api private
  #
  # source://rubocop//lib/rubocop/cli/command/suggest_extensions.rb#73
  def all_extensions; end

  # @api private
  #
  # source://rubocop//lib/rubocop/cli/command/suggest_extensions.rb#69
  def current_formatter; end

  # @api private
  #
  # source://rubocop//lib/rubocop/cli/command/suggest_extensions.rb#117
  def dependent_gems; end

  # @api private
  #
  # source://rubocop//lib/rubocop/cli/command/suggest_extensions.rb#87
  def extensions; end

  # @api private
  #
  # source://rubocop//lib/rubocop/cli/command/suggest_extensions.rb#109
  def installed_and_not_loaded_extensions; end

  # @api private
  #
  # source://rubocop//lib/rubocop/cli/command/suggest_extensions.rb#91
  def installed_extensions; end

  # @api private
  #
  # source://rubocop//lib/rubocop/cli/command/suggest_extensions.rb#121
  def installed_gems; end

  # @api private
  #
  # source://rubocop//lib/rubocop/cli/command/suggest_extensions.rb#99
  def loaded_extensions; end

  # @api private
  #
  # source://rubocop//lib/rubocop/cli/command/suggest_extensions.rb#113
  def lockfile; end

  # @api private
  #
  # source://rubocop//lib/rubocop/cli/command/suggest_extensions.rb#95
  def not_installed_extensions; end

  # @api private
  #
  # source://rubocop//lib/rubocop/cli/command/suggest_extensions.rb#41
  def print_install_suggestions; end

  # @api private
  #
  # source://rubocop//lib/rubocop/cli/command/suggest_extensions.rb#51
  def print_load_suggestions; end

  # @api private
  #
  # source://rubocop//lib/rubocop/cli/command/suggest_extensions.rb#60
  def print_opt_out_instruction; end

  # @api private
  #
  # source://rubocop//lib/rubocop/cli/command/suggest_extensions.rb#125
  def puts(*args); end

  # @api private
  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/cli/command/suggest_extensions.rb#30
  def skip?; end
end

RuboCop::CLI::Command::SuggestExtensions::INCLUDED_FORMATTERS = T.let(T.unsafe(nil), Array)

class RuboCop::CLI::Command::Version < ::RuboCop::CLI::Command::Base
  # @api private
  #
  # source://rubocop//lib/rubocop/cli/command/version.rb#11
  def run; end
end

RuboCop::CLI::DEFAULT_PARALLEL_OPTIONS = T.let(T.unsafe(nil), Array)

class RuboCop::CLI::Environment
  # @api private
  # @return [Environment] a new instance of Environment
  #
  # source://rubocop//lib/rubocop/cli/environment.rb#10
  def initialize(options, config_store, paths); end

  # @api private
  #
  # source://rubocop//lib/rubocop/cli/environment.rb#8
  def config_store; end

  # @api private
  #
  # source://rubocop//lib/rubocop/cli/environment.rb#8
  def options; end

  # @api private
  #
  # source://rubocop//lib/rubocop/cli/environment.rb#8
  def paths; end

  # Run a command in this environment.
  #
  # @api private
  #
  # source://rubocop//lib/rubocop/cli/environment.rb#17
  def run(name); end
end

class RuboCop::CLI::Finished < ::StandardError; end

RuboCop::CLI::STATUS_ERROR = T.let(T.unsafe(nil), Integer)

RuboCop::CLI::STATUS_INTERRUPTED = T.let(T.unsafe(nil), Integer)

RuboCop::CLI::STATUS_OFFENSES = T.let(T.unsafe(nil), Integer)

RuboCop::CLI::STATUS_SUCCESS = T.let(T.unsafe(nil), Integer)

RuboCop::CommentConfig::CONFIG_DISABLED_LINE_RANGE_MIN = T.let(T.unsafe(nil), Float)

class RuboCop::Config
  include ::RuboCop::PathUtil
  include ::RuboCop::FileFinder
  extend ::RuboCop::SimpleForwardable

  # @return [Config] a new instance of Config
  #
  # source://rubocop//lib/rubocop/config.rb#31
  def initialize(hash = T.unsafe(nil), loaded_path = T.unsafe(nil)); end

  # source://rubocop-ast/1.44.1/lib/rubocop/ast/utilities/simple_forwardable.rb#19
  def [](*_arg0, **_arg1, &_arg2); end

  # source://rubocop-ast/1.44.1/lib/rubocop/ast/utilities/simple_forwardable.rb#19
  def []=(*_arg0, **_arg1, &_arg2); end

  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/config.rb#212
  def active_support_extensions_enabled?; end

  # source://rubocop//lib/rubocop/config.rb#127
  def add_excludes_from_higher_level(highest_config); end

  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/config.rb#239
  def allowed_camel_case_file?(file); end

  # Paths specified in configuration files starting with .rubocop are
  # relative to the directory where that file is. Paths in other config files
  # are relative to the current directory. This is so that paths in
  # config/default.yml, for example, are not relative to RuboCop's config
  # directory since that wouldn't work.
  #
  # source://rubocop//lib/rubocop/config.rb#283
  def base_dir_for_path_parameters; end

  # @return [String, nil]
  #
  # source://rubocop//lib/rubocop/config.rb#313
  def bundler_lock_file_path; end

  # source://rubocop//lib/rubocop/config.rb#85
  def check; end

  # @api private
  # @return [Boolean] whether config for this badge has 'Include' or 'Exclude' keys
  #
  # source://rubocop//lib/rubocop/config.rb#180
  def clusivity_config_for_badge?(badge); end

  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/config.rb#200
  def cop_enabled?(name); end

  # source://rubocop-ast/1.44.1/lib/rubocop/ast/utilities/simple_forwardable.rb#19
  def delete(*_arg0, **_arg1, &_arg2); end

  # source://rubocop//lib/rubocop/config.rb#139
  def deprecation_check; end

  # source://rubocop-ast/1.44.1/lib/rubocop/ast/utilities/simple_forwardable.rb#19
  def dig(*_arg0, **_arg1, &_arg2); end

  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/config.rb#204
  def disabled_new_cops?; end

  # source://rubocop-ast/1.44.1/lib/rubocop/ast/utilities/simple_forwardable.rb#19
  def each(*_arg0, **_arg1, &_arg2); end

  # source://rubocop-ast/1.44.1/lib/rubocop/ast/utilities/simple_forwardable.rb#19
  def each_key(*_arg0, **_arg1, &_arg2); end

  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/config.rb#208
  def enabled_new_cops?; end

  # source://rubocop-ast/1.44.1/lib/rubocop/ast/utilities/simple_forwardable.rb#19
  def fetch(*_arg0, **_arg1, &_arg2); end

  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/config.rb#261
  def file_to_exclude?(file); end

  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/config.rb#220
  def file_to_include?(file); end

  # source://rubocop//lib/rubocop/config.rb#196
  def for_all_cops; end

  # Note: the 'Enabled' attribute is same as that returned by `for_cop`
  #
  # @return [Config] for the given cop merged with that of its department (if any)
  #
  # source://rubocop//lib/rubocop/config.rb#166
  def for_badge(badge); end

  # Note: the 'Enabled' attribute is calculated according to the department's
  # and 'AllCops' configuration; other attributes are not inherited.
  #
  # @return [Config] for the given cop / cop name.
  #
  # source://rubocop//lib/rubocop/config.rb#153
  def for_cop(cop); end

  # Note: the 'Enabled' attribute will be present only if specified
  # at the department's level
  #
  # @return [Config] for the given department name.
  #
  # source://rubocop//lib/rubocop/config.rb#191
  def for_department(department_name); end

  # If the given cop is enabled, returns its configuration hash.
  # Otherwise, returns an empty hash.
  #
  # @return [Config, Hash] for the given cop / cop name.
  #
  # source://rubocop//lib/rubocop/config.rb#160
  def for_enabled_cop(cop); end

  # Returns target's locked gem versions (i.e. from Gemfile.lock or gems.locked)
  #
  # source://rubocop//lib/rubocop/config.rb#338
  def gem_versions_in_target; end

  # source://rubocop//lib/rubocop/config.rb#342
  def inspect; end

  # True if this is a config file that is shipped with RuboCop
  #
  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/config.rb#110
  def internal?; end

  # source://rubocop-ast/1.44.1/lib/rubocop/ast/utilities/simple_forwardable.rb#19
  def key?(*_arg0, **_arg1, &_arg2); end

  # source://rubocop-ast/1.44.1/lib/rubocop/ast/utilities/simple_forwardable.rb#19
  def keys(*_arg0, **_arg1, &_arg2); end

  # source://rubocop//lib/rubocop/config.rb#81
  def loaded_features; end

  # Returns the value of attribute loaded_path.
  #
  # source://rubocop//lib/rubocop/config.rb#21
  def loaded_path; end

  # source://rubocop//lib/rubocop/config.rb#77
  def loaded_plugins; end

  # source://rubocop//lib/rubocop/config.rb#115
  def make_excludes_absolute; end

  # source://rubocop-ast/1.44.1/lib/rubocop/ast/utilities/simple_forwardable.rb#19
  def map(*_arg0, **_arg1, &_arg2); end

  # source://rubocop-ast/1.44.1/lib/rubocop/ast/utilities/simple_forwardable.rb#19
  def merge(*_arg0, **_arg1, &_arg2); end

  # source://rubocop//lib/rubocop/config.rb#293
  def parser_engine; end

  # source://rubocop//lib/rubocop/config.rb#274
  def path_relative_to_config(path); end

  # source://rubocop//lib/rubocop/config.rb#270
  def patterns_to_exclude; end

  # source://rubocop//lib/rubocop/config.rb#266
  def patterns_to_include; end

  # source://rubocop//lib/rubocop/config.rb#324
  def pending_cops; end

  # Returns true if there's a chance that an Include pattern matches hidden
  # files, false if that's definitely not possible.
  #
  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/config.rb#253
  def possibly_include_hidden?; end

  # source://rubocop-ast/1.44.1/lib/rubocop/ast/utilities/simple_forwardable.rb#19
  def replace(*_arg0, **_arg1, &_arg2); end

  # source://rubocop//lib/rubocop/config.rb#105
  def signature; end

  # source://rubocop//lib/rubocop/config.rb#308
  def smart_loaded_path; end

  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/config.rb#216
  def string_literals_frozen_by_default?; end

  # source://rubocop//lib/rubocop/config.rb#297
  def target_rails_version; end

  # source://rubocop-ast/1.44.1/lib/rubocop/ast/utilities/simple_forwardable.rb#19
  def target_ruby_version(*_arg0, **_arg1, &_arg2); end

  # source://rubocop-ast/1.44.1/lib/rubocop/ast/utilities/simple_forwardable.rb#19
  def to_h(*_arg0, **_arg1, &_arg2); end

  # source://rubocop-ast/1.44.1/lib/rubocop/ast/utilities/simple_forwardable.rb#19
  def to_hash(*_arg0, **_arg1, &_arg2); end

  # source://rubocop//lib/rubocop/config.rb#101
  def to_s; end

  # source://rubocop-ast/1.44.1/lib/rubocop/ast/utilities/simple_forwardable.rb#19
  def transform_values(*_arg0, **_arg1, &_arg2); end

  # source://rubocop-ast/1.44.1/lib/rubocop/ast/utilities/simple_forwardable.rb#19
  def validate(*_arg0, **_arg1, &_arg2); end

  # source://rubocop//lib/rubocop/config.rb#92
  def validate_after_resolution; end

  private

  # source://rubocop//lib/rubocop/config.rb#392
  def department_of(qualified_cop_name); end

  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/config.rb#380
  def enable_cop?(qualified_cop_name, cop_options); end

  # @param gem_version [Gem::Version] an object like `Gem::Version.new("7.1.2.3")`
  # @return [Float] The major and minor version, like `7.1`
  #
  # source://rubocop//lib/rubocop/config.rb#367
  def gem_version_to_major_minor_float(gem_version); end

  # source://rubocop//lib/rubocop/config.rb#373
  def read_gem_versions_from_target_lockfile; end

  # @return [Float, nil] The Rails version as a `major.minor` Float.
  #
  # source://rubocop//lib/rubocop/config.rb#354
  def read_rails_version_from_bundler_lock_file; end

  # @return [Float, nil] The Rails version as a `major.minor` Float.
  #
  # source://rubocop//lib/rubocop/config.rb#349
  def target_rails_version_from_bundler_lock_file; end

  class << self
    # source://rubocop//lib/rubocop/config.rb#23
    def create(hash, path, check: T.unsafe(nil)); end
  end
end

class RuboCop::Config::CopConfig < ::Struct
  # Returns the value of attribute metadata
  #
  # @return [Object] the current value of metadata
  def metadata; end

  # Sets the attribute metadata
  #
  # @param value [Object] the value to set the attribute metadata to.
  # @return [Object] the newly set value
  def metadata=(_); end

  # Returns the value of attribute name
  #
  # @return [Object] the current value of name
  def name; end

  # Sets the attribute name
  #
  # @param value [Object] the value to set the attribute name to.
  # @return [Object] the newly set value
  def name=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

RuboCop::Config::DEFAULT_RAILS_VERSION = T.let(T.unsafe(nil), Float)

RuboCop::Config::EMPTY_CONFIG = T.let(T.unsafe(nil), Hash)

class RuboCop::ConfigFinder
  extend ::RuboCop::FileFinder

  class << self
    # @api private
    #
    # source://rubocop//lib/rubocop/config_finder.rb#19
    def find_config_path(target_dir); end

    # Returns the path RuboCop inferred as the root of the project. No file
    # searches will go past this directory.
    #
    # @api private
    #
    # source://rubocop//lib/rubocop/config_finder.rb#26
    def project_root; end

    # @api private
    #
    # source://rubocop//lib/rubocop/config_finder.rb#17
    def project_root=(_arg0); end

    private

    # @api private
    #
    # source://rubocop//lib/rubocop/config_finder.rb#69
    def expand_path(path); end

    # @api private
    #
    # source://rubocop//lib/rubocop/config_finder.rb#40
    def find_project_dotfile(target_dir); end

    # @api private
    #
    # source://rubocop//lib/rubocop/config_finder.rb#32
    def find_project_root; end

    # @api private
    #
    # source://rubocop//lib/rubocop/config_finder.rb#44
    def find_project_root_dot_config; end

    # @api private
    #
    # source://rubocop//lib/rubocop/config_finder.rb#54
    def find_user_dotfile; end

    # @api private
    #
    # source://rubocop//lib/rubocop/config_finder.rb#62
    def find_user_xdg_config; end
  end
end

RuboCop::ConfigFinder::DEFAULT_FILE = T.let(T.unsafe(nil), String)

RuboCop::ConfigFinder::DOTFILE = T.let(T.unsafe(nil), String)

RuboCop::ConfigFinder::RUBOCOP_HOME = T.let(T.unsafe(nil), String)

RuboCop::ConfigFinder::XDG_CONFIG = T.let(T.unsafe(nil), String)

class RuboCop::ConfigLoader
  extend ::RuboCop::FileFinder

  class << self
    # source://rubocop//lib/rubocop/config_loader.rb#152
    def add_excludes_from_files(config, config_file); end

    # Used to add features that were required inside a config or from
    # the CLI using `--require`.
    #
    # @api private
    #
    # source://rubocop//lib/rubocop/config_loader.rb#241
    def add_loaded_features(loaded_features); end

    # Used to add plugins that were required inside a config or from
    # the CLI using `--plugin`.
    #
    # @api private
    #
    # source://rubocop//lib/rubocop/config_loader.rb#234
    def add_loaded_plugins(loaded_plugins); end

    # source://rubocop//lib/rubocop/config_loader.rb#91
    def add_missing_namespaces(path, hash); end

    # source://rubocop//lib/rubocop/config_loader.rb#41
    def clear_options; end

    # Returns the path of .rubocop.yml searching upwards in the
    # directory structure starting at the given directory where the
    # inspected file is. If no .rubocop.yml is found there, the
    # user's home directory is checked. If there's no .rubocop.yml
    # there either, the path to the default file is returned.
    #
    # source://rubocop//lib/rubocop/config_loader.rb#119
    def configuration_file_for(target_dir); end

    # source://rubocop//lib/rubocop/config_loader.rb#123
    def configuration_from_file(config_file, check: T.unsafe(nil)); end

    # Returns the value of attribute debug.
    #
    # source://rubocop//lib/rubocop/config_loader.rb#33
    def debug; end

    # Sets the attribute debug
    #
    # @param value the value to set the attribute debug to.
    #
    # source://rubocop//lib/rubocop/config_loader.rb#33
    def debug=(_arg0); end

    # Returns the value of attribute debug.
    #
    # source://rubocop//lib/rubocop/config_loader.rb#33
    def debug?; end

    # source://rubocop//lib/rubocop/config_loader.rb#162
    def default_configuration; end

    # Sets the attribute default_configuration
    #
    # @param value the value to set the attribute default_configuration to.
    #
    # source://rubocop//lib/rubocop/config_loader.rb#35
    def default_configuration=(_arg0); end

    # Returns the value of attribute disable_pending_cops.
    #
    # source://rubocop//lib/rubocop/config_loader.rb#33
    def disable_pending_cops; end

    # Sets the attribute disable_pending_cops
    #
    # @param value the value to set the attribute disable_pending_cops to.
    #
    # source://rubocop//lib/rubocop/config_loader.rb#33
    def disable_pending_cops=(_arg0); end

    # Returns the value of attribute enable_pending_cops.
    #
    # source://rubocop//lib/rubocop/config_loader.rb#33
    def enable_pending_cops; end

    # Sets the attribute enable_pending_cops
    #
    # @param value the value to set the attribute enable_pending_cops to.
    #
    # source://rubocop//lib/rubocop/config_loader.rb#33
    def enable_pending_cops=(_arg0); end

    # Returns the value of attribute ignore_parent_exclusion.
    #
    # source://rubocop//lib/rubocop/config_loader.rb#33
    def ignore_parent_exclusion; end

    # Sets the attribute ignore_parent_exclusion
    #
    # @param value the value to set the attribute ignore_parent_exclusion to.
    #
    # source://rubocop//lib/rubocop/config_loader.rb#33
    def ignore_parent_exclusion=(_arg0); end

    # Returns the value of attribute ignore_parent_exclusion.
    #
    # source://rubocop//lib/rubocop/config_loader.rb#33
    def ignore_parent_exclusion?; end

    # Returns the value of attribute ignore_unrecognized_cops.
    #
    # source://rubocop//lib/rubocop/config_loader.rb#33
    def ignore_unrecognized_cops; end

    # Sets the attribute ignore_unrecognized_cops
    #
    # @param value the value to set the attribute ignore_unrecognized_cops to.
    #
    # source://rubocop//lib/rubocop/config_loader.rb#33
    def ignore_unrecognized_cops=(_arg0); end

    # This API is primarily intended for testing and documenting plugins.
    # When testing a plugin using `rubocop/rspec/support`, the plugin is loaded automatically,
    # so this API is usually not needed. It is intended to be used only when implementing tests
    # that do not use `rubocop/rspec/support`.
    #
    # source://rubocop//lib/rubocop/config_loader.rb#174
    def inject_defaults!(config_yml_path); end

    # source://rubocop//lib/rubocop/config_loader.rb#53
    def load_file(file, check: T.unsafe(nil)); end

    # @raise [TypeError]
    #
    # source://rubocop//lib/rubocop/config_loader.rb#78
    def load_yaml_configuration(absolute_path); end

    # Returns the value of attribute loaded_features.
    #
    # source://rubocop//lib/rubocop/config_loader.rb#36
    def loaded_features; end

    # Returns the value of attribute loaded_plugins.
    #
    # source://rubocop//lib/rubocop/config_loader.rb#36
    def loaded_plugins; end

    # Return a recursive merge of two hashes. That is, a normal hash merge,
    # with the addition that any value that is a hash, and occurs in both
    # arguments, will also be merged. And so on.
    #
    # source://rubocop//lib/rubocop/config_loader.rb#110
    def merge(base_hash, derived_hash); end

    # Merges the given configuration with the default one.
    #
    # source://rubocop//lib/rubocop/config_loader.rb#227
    def merge_with_default(config, config_file, unset_nil: T.unsafe(nil)); end

    # source://rubocop//lib/rubocop/config_loader.rb#143
    def pending_cops_only_qualified(pending_cops); end

    # @return [Boolean]
    #
    # source://rubocop//lib/rubocop/config_loader.rb#147
    def possible_new_cops?(config); end

    # Returns the path RuboCop inferred as the root of the project. No file
    # searches will go past this directory.
    #
    # @deprecated Use `RuboCop::ConfigFinder.project_root` instead.
    #
    # source://rubocop//lib/rubocop/config_loader.rb#202
    def project_root; end

    # source://rubocop//lib/rubocop/config_loader.rb#211
    def warn_on_pending_cops(pending_cops); end

    # source://rubocop//lib/rubocop/config_loader.rb#219
    def warn_pending_cop(cop); end

    private

    # source://rubocop//lib/rubocop/config_loader.rb#255
    def check_duplication(yaml_code, absolute_path); end

    # source://rubocop//lib/rubocop/config_loader.rb#247
    def file_path(file); end

    # Read the specified file, or exit with a friendly, concise message on
    # stderr. Care is taken to use the standard OS exit code for a "file not
    # found" error.
    #
    # source://rubocop//lib/rubocop/config_loader.rb#275
    def read_file(absolute_path); end

    # source://rubocop//lib/rubocop/config_loader.rb#251
    def resolver; end

    # source://rubocop//lib/rubocop/config_loader.rb#281
    def yaml_tree_to_hash(yaml_tree); end

    # source://rubocop//lib/rubocop/config_loader.rb#291
    def yaml_tree_to_hash!(yaml_tree); end
  end
end

RuboCop::ConfigLoader::DEFAULT_FILE = T.let(T.unsafe(nil), String)

RuboCop::ConfigLoader::DOTFILE = T.let(T.unsafe(nil), String)

RuboCop::ConfigLoader::RUBOCOP_HOME = T.let(T.unsafe(nil), String)

class RuboCop::ConfigLoaderResolver
  # When one .rubocop.yml file inherits from another .rubocop.yml file, the Include paths in the
  # base configuration are relative to the directory where the base configuration file is. For the
  # derived configuration, we need to make those paths relative to where the derived configuration
  # file is.
  #
  # @api private
  #
  # source://rubocop//lib/rubocop/config_loader_resolver.rb#64
  def fix_include_paths(base_config_path, hash, path, key, value); end

  # Return a recursive merge of two hashes. That is, a normal hash merge,
  # with the addition that any value that is a hash, and occurs in both
  # arguments, will also be merged. And so on.
  #
  #
  # @api private
  #
  # source://rubocop//lib/rubocop/config_loader_resolver.rb#118
  def merge(base_hash, derived_hash, **opts); end

  # Merges the given configuration with the default one. If
  # AllCops:DisabledByDefault is true, it changes the Enabled params so that
  # only cops from user configuration are enabled. If
  # AllCops:EnabledByDefault is true, it changes the Enabled params so that
  # only cops explicitly disabled in user configuration are disabled.
  #
  # @api private
  #
  # source://rubocop//lib/rubocop/config_loader_resolver.rb#94
  def merge_with_default(config, config_file, unset_nil:); end

  # An `Enabled: true` setting in user configuration for a cop overrides an
  # `Enabled: false` setting for its department.
  #
  # @api private
  #
  # source://rubocop//lib/rubocop/config_loader_resolver.rb#138
  def override_department_setting_for_cops(base_hash, derived_hash); end

  # If a cop was previously explicitly enabled, but then superseded by the
  # department being disabled, disable it.
  #
  # @api private
  #
  # source://rubocop//lib/rubocop/config_loader_resolver.rb#155
  def override_enabled_for_disabled_departments(base_hash, derived_hash); end

  # @api private
  #
  # source://rubocop//lib/rubocop/config_loader_resolver.rb#38
  def resolve_inheritance(path, hash, file, debug); end

  # @api private
  #
  # source://rubocop//lib/rubocop/config_loader_resolver.rb#74
  def resolve_inheritance_from_gems(hash); end

  # @api private
  #
  # source://rubocop//lib/rubocop/config_loader_resolver.rb#11
  def resolve_plugins(rubocop_config, plugins); end

  # @api private
  #
  # source://rubocop//lib/rubocop/config_loader_resolver.rb#18
  def resolve_requires(path, hash); end

  private

  # @api private
  #
  # source://rubocop//lib/rubocop/config_loader_resolver.rb#234
  def base_configs(path, inherit_from, file); end

  # @api private
  #
  # source://rubocop//lib/rubocop/config_loader_resolver.rb#202
  def determine_inherit_mode(hash, key); end

  # @api private
  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/config_loader_resolver.rb#171
  def disabled?(hash, department); end

  # @api private
  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/config_loader_resolver.rb#175
  def duplicate_setting?(base_hash, derived_hash, key, inherited_file); end

  # @api private
  #
  # source://rubocop//lib/rubocop/config_loader_resolver.rb#196
  def duplicate_setting_warning(opts, key); end

  # @api private
  #
  # source://rubocop//lib/rubocop/config_loader_resolver.rb#293
  def gem_config_path(gem_name, relative_config_path); end

  # @api private
  #
  # source://rubocop//lib/rubocop/config_loader_resolver.rb#271
  def handle_disabled_by_default(config, new_default_configuration); end

  # @api private
  #
  # source://rubocop//lib/rubocop/config_loader_resolver.rb#246
  def inherited_file(path, inherit_from, file); end

  # @api private
  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/config_loader_resolver.rb#230
  def merge_hashes?(base_hash, derived_hash, key); end

  # @api private
  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/config_loader_resolver.rb#267
  def remote_config?(file); end

  # @api private
  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/config_loader_resolver.rb#222
  def should_merge?(mode, key); end

  # @api private
  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/config_loader_resolver.rb#226
  def should_override?(mode, key); end

  # @api private
  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/config_loader_resolver.rb#208
  def should_union?(derived_hash, base_hash, root_mode, key); end

  # @api private
  #
  # source://rubocop//lib/rubocop/config_loader_resolver.rb#289
  def transform(config, &block); end

  # @api private
  #
  # source://rubocop//lib/rubocop/config_loader_resolver.rb#184
  def warn_on_duplicate_setting(base_hash, derived_hash, key, **opts); end
end

class RuboCop::ConfigNotFoundError < ::RuboCop::Error; end

class RuboCop::ConfigObsoletion
  # @api private
  # @return [ConfigObsoletion] a new instance of ConfigObsoletion
  #
  # source://rubocop//lib/rubocop/config_obsoletion.rb#66
  def initialize(config); end

  # @api private
  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/config_obsoletion.rb#84
  def deprecated_cop_name?(name); end

  # @api private
  #
  # source://rubocop//lib/rubocop/config_obsoletion.rb#79
  def legacy_cop_names; end

  # @api private
  # @raise [ValidationError]
  #
  # source://rubocop//lib/rubocop/config_obsoletion.rb#72
  def reject_obsolete!; end

  # @api private
  #
  # source://rubocop//lib/rubocop/config_obsoletion.rb#21
  def rules; end

  # @api private
  #
  # source://rubocop//lib/rubocop/config_obsoletion.rb#21
  def warnings; end

  private

  # @api private
  #
  # source://rubocop//lib/rubocop/config_obsoletion.rb#151
  def cop_rules; end

  # Cop rules are keyed by the name of the original cop
  #
  # @api private
  #
  # source://rubocop//lib/rubocop/config_obsoletion.rb#112
  def load_cop_rules(rules); end

  # Parameter rules may apply to multiple cops and multiple parameters
  # and are given as an array. Each combination is turned into a separate
  # rule object.
  #
  # @api private
  #
  # source://rubocop//lib/rubocop/config_obsoletion.rb#125
  def load_parameter_rules(rules); end

  # Default rules for obsoletions are in config/obsoletion.yml
  # Additional rules files can be added with `RuboCop::ConfigObsoletion.files << filename`
  #
  # @api private
  #
  # source://rubocop//lib/rubocop/config_obsoletion.rb#92
  def load_rules; end

  # @api private
  #
  # source://rubocop//lib/rubocop/config_obsoletion.rb#138
  def obsoletions; end

  class << self
    # @api private
    # @return [Boolean]
    #
    # source://rubocop//lib/rubocop/config_obsoletion.rb#45
    def deprecated_cop_name?(name); end

    # @api private
    #
    # source://rubocop//lib/rubocop/config_obsoletion.rb#49
    def deprecated_names_for(cop); end

    # @api private
    #
    # source://rubocop//lib/rubocop/config_obsoletion.rb#24
    def files; end

    # @api private
    #
    # source://rubocop//lib/rubocop/config_obsoletion.rb#24
    def files=(_arg0); end

    # @api private
    #
    # source://rubocop//lib/rubocop/config_obsoletion.rb#26
    def global; end

    # @api private
    #
    # source://rubocop//lib/rubocop/config_obsoletion.rb#40
    def legacy_cop_names; end

    # @api private
    #
    # source://rubocop//lib/rubocop/config_obsoletion.rb#30
    def reset!; end

    # @api private
    #
    # source://rubocop//lib/rubocop/config_obsoletion.rb#36
    def rules_cache_key; end
  end
end

RuboCop::ConfigObsoletion::COP_RULE_CLASSES = T.let(T.unsafe(nil), Hash)

class RuboCop::ConfigObsoletion::ChangedEnforcedStyles < ::RuboCop::ConfigObsoletion::ParameterRule
  # @api private
  #
  # source://rubocop//lib/rubocop/config_obsoletion/changed_enforced_styles.rb#14
  def message; end

  # @api private
  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/config_obsoletion/changed_enforced_styles.rb#10
  def violated?; end

  private

  # @api private
  #
  # source://rubocop//lib/rubocop/config_obsoletion/changed_enforced_styles.rb#28
  def value; end
end

RuboCop::ConfigObsoletion::ChangedEnforcedStyles::BASE_MESSAGE = T.let(T.unsafe(nil), String)

class RuboCop::ConfigObsoletion::ChangedParameter < ::RuboCop::ConfigObsoletion::ParameterRule
  # @api private
  #
  # source://rubocop//lib/rubocop/config_obsoletion/changed_parameter.rb#10
  def message; end
end

RuboCop::ConfigObsoletion::ChangedParameter::BASE_MESSAGE = T.let(T.unsafe(nil), String)

class RuboCop::ConfigObsoletion::CopRule < ::RuboCop::ConfigObsoletion::Rule
  # @api private
  # @return [CopRule] a new instance of CopRule
  #
  # source://rubocop//lib/rubocop/config_obsoletion/cop_rule.rb#10
  def initialize(config, old_name); end

  # @api private
  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/config_obsoletion/cop_rule.rb#15
  def cop_rule?; end

  # @api private
  #
  # source://rubocop//lib/rubocop/config_obsoletion/cop_rule.rb#19
  def message; end

  # @api private
  #
  # source://rubocop//lib/rubocop/config_obsoletion/cop_rule.rb#8
  def old_name; end

  # @api private
  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/config_obsoletion/cop_rule.rb#28
  def violated?; end

  # Cop rules currently can only be failures, not warnings
  #
  # @api private
  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/config_obsoletion/cop_rule.rb#24
  def warning?; end
end

RuboCop::ConfigObsoletion::DEFAULT_RULES_FILE = T.let(T.unsafe(nil), String)

class RuboCop::ConfigObsoletion::ExtractedCop < ::RuboCop::ConfigObsoletion::CopRule
  # @api private
  # @return [ExtractedCop] a new instance of ExtractedCop
  #
  # source://rubocop//lib/rubocop/config_obsoletion/extracted_cop.rb#11
  def initialize(config, old_name, gem); end

  # @api private
  #
  # source://rubocop//lib/rubocop/config_obsoletion/extracted_cop.rb#9
  def department; end

  # @api private
  #
  # source://rubocop//lib/rubocop/config_obsoletion/extracted_cop.rb#9
  def gem; end

  # @api private
  #
  # source://rubocop//lib/rubocop/config_obsoletion/extracted_cop.rb#23
  def rule_message; end

  # @api private
  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/config_obsoletion/extracted_cop.rb#17
  def violated?; end

  private

  # @api private
  #
  # source://rubocop//lib/rubocop/config_obsoletion/extracted_cop.rb#32
  def affected_cops; end

  # @api private
  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/config_obsoletion/extracted_cop.rb#41
  def plugin_loaded?; end
end

RuboCop::ConfigObsoletion::LOAD_RULES_CACHE = T.let(T.unsafe(nil), Hash)

RuboCop::ConfigObsoletion::PARAMETER_RULE_CLASSES = T.let(T.unsafe(nil), Hash)

class RuboCop::ConfigObsoletion::ParameterRule < ::RuboCop::ConfigObsoletion::Rule
  # @api private
  # @return [ParameterRule] a new instance of ParameterRule
  #
  # source://rubocop//lib/rubocop/config_obsoletion/parameter_rule.rb#10
  def initialize(config, cop, parameter, metadata); end

  # @api private
  #
  # source://rubocop//lib/rubocop/config_obsoletion/parameter_rule.rb#8
  def cop; end

  # @api private
  #
  # source://rubocop//lib/rubocop/config_obsoletion/parameter_rule.rb#8
  def metadata; end

  # @api private
  #
  # source://rubocop//lib/rubocop/config_obsoletion/parameter_rule.rb#8
  def parameter; end

  # @api private
  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/config_obsoletion/parameter_rule.rb#17
  def parameter_rule?; end

  # @api private
  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/config_obsoletion/parameter_rule.rb#21
  def violated?; end

  # @api private
  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/config_obsoletion/parameter_rule.rb#25
  def warning?; end

  private

  # @api private
  #
  # source://rubocop//lib/rubocop/config_obsoletion/parameter_rule.rb#39
  def alternative; end

  # @api private
  #
  # source://rubocop//lib/rubocop/config_obsoletion/parameter_rule.rb#43
  def alternatives; end

  # @api private
  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/config_obsoletion/parameter_rule.rb#31
  def applies_to_current_ruby_version?; end

  # @api private
  #
  # source://rubocop//lib/rubocop/config_obsoletion/parameter_rule.rb#47
  def reason; end

  # @api private
  #
  # source://rubocop//lib/rubocop/config_obsoletion/parameter_rule.rb#51
  def severity; end
end

class RuboCop::ConfigObsoletion::RemovedCop < ::RuboCop::ConfigObsoletion::CopRule
  # @api private
  # @return [RemovedCop] a new instance of RemovedCop
  #
  # source://rubocop//lib/rubocop/config_obsoletion/removed_cop.rb#13
  def initialize(config, old_name, metadata); end

  # @api private
  #
  # source://rubocop//lib/rubocop/config_obsoletion/removed_cop.rb#9
  def metadata; end

  # @api private
  #
  # source://rubocop//lib/rubocop/config_obsoletion/removed_cop.rb#9
  def old_name; end

  # @api private
  #
  # source://rubocop//lib/rubocop/config_obsoletion/removed_cop.rb#18
  def rule_message; end

  private

  # @api private
  #
  # source://rubocop//lib/rubocop/config_obsoletion/removed_cop.rb#36
  def alternatives; end

  # @api private
  #
  # source://rubocop//lib/rubocop/config_obsoletion/removed_cop.rb#32
  def reason; end
end

RuboCop::ConfigObsoletion::RemovedCop::BASE_MESSAGE = T.let(T.unsafe(nil), String)

class RuboCop::ConfigObsoletion::RenamedCop < ::RuboCop::ConfigObsoletion::CopRule
  # @api private
  # @return [RenamedCop] a new instance of RenamedCop
  #
  # source://rubocop//lib/rubocop/config_obsoletion/renamed_cop.rb#11
  def initialize(config, old_name, name_or_hash); end

  # @api private
  #
  # source://rubocop//lib/rubocop/config_obsoletion/renamed_cop.rb#9
  def metadata; end

  # @api private
  #
  # source://rubocop//lib/rubocop/config_obsoletion/renamed_cop.rb#9
  def new_name; end

  # @api private
  #
  # source://rubocop//lib/rubocop/config_obsoletion/renamed_cop.rb#23
  def rule_message; end

  # @api private
  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/config_obsoletion/renamed_cop.rb#27
  def warning?; end

  private

  # @api private
  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/config_obsoletion/renamed_cop.rb#33
  def moved?; end

  # @api private
  #
  # source://rubocop//lib/rubocop/config_obsoletion/renamed_cop.rb#44
  def severity; end

  # @api private
  #
  # source://rubocop//lib/rubocop/config_obsoletion/renamed_cop.rb#40
  def verb; end
end

class RuboCop::ConfigObsoletion::Rule
  # @api private
  # @return [Rule] a new instance of Rule
  #
  # source://rubocop//lib/rubocop/config_obsoletion/rule.rb#8
  def initialize(config); end

  # Does this rule relate to cops?
  #
  # @api private
  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/config_obsoletion/rule.rb#13
  def cop_rule?; end

  # Does this rule relate to parameters?
  #
  # @api private
  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/config_obsoletion/rule.rb#18
  def parameter_rule?; end

  # @api private
  # @raise [NotImplementedError]
  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/config_obsoletion/rule.rb#22
  def violated?; end

  private

  # @api private
  #
  # source://rubocop//lib/rubocop/config_obsoletion/rule.rb#28
  def config; end

  # @api private
  #
  # source://rubocop//lib/rubocop/config_obsoletion/rule.rb#36
  def smart_loaded_path; end

  # @api private
  #
  # source://rubocop//lib/rubocop/config_obsoletion/rule.rb#30
  def to_sentence(collection, connector: T.unsafe(nil)); end
end

class RuboCop::ConfigObsoletion::SplitCop < ::RuboCop::ConfigObsoletion::CopRule
  # @api private
  # @return [SplitCop] a new instance of SplitCop
  #
  # source://rubocop//lib/rubocop/config_obsoletion/split_cop.rb#11
  def initialize(config, old_name, metadata); end

  # @api private
  #
  # source://rubocop//lib/rubocop/config_obsoletion/split_cop.rb#9
  def metadata; end

  # @api private
  #
  # source://rubocop//lib/rubocop/config_obsoletion/split_cop.rb#16
  def rule_message; end

  private

  # @api private
  #
  # source://rubocop//lib/rubocop/config_obsoletion/split_cop.rb#22
  def alternatives; end
end

class RuboCop::ConfigRegeneration
  # Get options from the comment in the TODO file, and parse them as options
  #
  # @api private
  #
  # source://rubocop//lib/rubocop/config_regeneration.rb#12
  def options; end

  private

  # @api private
  #
  # source://rubocop//lib/rubocop/config_regeneration.rb#29
  def generation_command; end

  # @api private
  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/config_regeneration.rb#25
  def todo_exists?; end
end

RuboCop::ConfigRegeneration::AUTO_GENERATED_FILE = T.let(T.unsafe(nil), String)

RuboCop::ConfigRegeneration::COMMAND_REGEX = T.let(T.unsafe(nil), Regexp)

RuboCop::ConfigRegeneration::DEFAULT_OPTIONS = T.let(T.unsafe(nil), Hash)

class RuboCop::ConfigStore
  # @return [ConfigStore] a new instance of ConfigStore
  #
  # source://rubocop//lib/rubocop/config_store.rb#10
  def initialize; end

  # If type (file/dir) is known beforehand,
  # prefer using #for_file or #for_dir for improved performance
  #
  # source://rubocop//lib/rubocop/config_store.rb#52
  def for(file_or_dir); end

  # source://rubocop//lib/rubocop/config_store.rb#61
  def for_dir(dir); end

  # source://rubocop//lib/rubocop/config_store.rb#42
  def for_file(file); end

  # source://rubocop//lib/rubocop/config_store.rb#46
  def for_pwd; end

  # source://rubocop//lib/rubocop/config_store.rb#33
  def force_default_config!; end

  # source://rubocop//lib/rubocop/config_store.rb#28
  def options_config=(options_config); end

  # source://rubocop//lib/rubocop/config_store.rb#37
  def unvalidated; end

  # Returns the value of attribute validated.
  #
  # source://rubocop//lib/rubocop/config_store.rb#7
  def validated; end

  # Returns the value of attribute validated.
  #
  # source://rubocop//lib/rubocop/config_store.rb#7
  def validated?; end
end

class RuboCop::ConfigValidator
  extend ::RuboCop::SimpleForwardable

  # @return [ConfigValidator] a new instance of ConfigValidator
  #
  # source://rubocop//lib/rubocop/config_validator.rb#28
  def initialize(config); end

  # source://rubocop-ast/1.44.1/lib/rubocop/ast/utilities/simple_forwardable.rb#19
  def for_all_cops(*_arg0, **_arg1, &_arg2); end

  # source://rubocop-ast/1.44.1/lib/rubocop/ast/utilities/simple_forwardable.rb#19
  def smart_loaded_path(*_arg0, **_arg1, &_arg2); end

  # source://rubocop//lib/rubocop/config_validator.rb#65
  def target_ruby_version; end

  # source://rubocop//lib/rubocop/config_validator.rb#34
  def validate; end

  # Validations that should only be run after all config resolving has
  # taken place:
  # * The target ruby version is only checked once the entire inheritance
  # chain has been loaded so that only the final value is validated, and
  # any obsolete but overridden values are ignored.
  #
  # source://rubocop//lib/rubocop/config_validator.rb#61
  def validate_after_resolution; end

  private

  # @raise [ValidationError]
  #
  # source://rubocop//lib/rubocop/config_validator.rb#100
  def alert_about_unrecognized_cops(invalid_cop_names); end

  # source://rubocop//lib/rubocop/config_validator.rb#263
  def check_cop_config_value(hash, parent = T.unsafe(nil)); end

  # source://rubocop//lib/rubocop/config_validator.rb#73
  def check_obsoletions; end

  # @raise [ValidationError]
  #
  # source://rubocop//lib/rubocop/config_validator.rb#80
  def check_target_ruby; end

  # source://rubocop//lib/rubocop/config_validator.rb#205
  def each_invalid_parameter(cop_name); end

  # source://rubocop//lib/rubocop/config_validator.rb#116
  def list_unknown_cops(invalid_cop_names); end

  # FIXME: Handling colors in exception messages like this is ugly.
  #
  # source://rubocop//lib/rubocop/config_validator.rb#284
  def param_error_message(parent, key, value, supposed_values); end

  # source://rubocop//lib/rubocop/config_validator.rb#252
  def reject_conflicting_safe_settings; end

  # @raise [ValidationError]
  #
  # source://rubocop//lib/rubocop/config_validator.rb#243
  def reject_mutually_exclusive_defaults; end

  # source://rubocop//lib/rubocop/config_validator.rb#139
  def suggestion(name); end

  # Returns the value of attribute target_ruby.
  #
  # source://rubocop//lib/rubocop/config_validator.rb#71
  def target_ruby; end

  # source://rubocop//lib/rubocop/config_validator.rb#217
  def validate_enforced_styles(valid_cop_names); end

  # @raise [ValidationError]
  #
  # source://rubocop//lib/rubocop/config_validator.rb#166
  def validate_new_cops_parameter; end

  # source://rubocop//lib/rubocop/config_validator.rb#191
  def validate_parameter_names(valid_cop_names); end

  # source://rubocop//lib/rubocop/config_validator.rb#177
  def validate_parameter_shape(valid_cop_names); end

  # source://rubocop//lib/rubocop/config_validator.rb#237
  def validate_support_and_has_list(name, formats, valid); end

  # @raise [ValidationError]
  #
  # source://rubocop//lib/rubocop/config_validator.rb#155
  def validate_syntax_cop; end
end

RuboCop::ConfigValidator::COMMON_PARAMS = T.let(T.unsafe(nil), Array)

RuboCop::ConfigValidator::CONFIG_CHECK_AUTOCORRECTS = T.let(T.unsafe(nil), Array)

RuboCop::ConfigValidator::CONFIG_CHECK_DEPARTMENTS = T.let(T.unsafe(nil), Array)

RuboCop::ConfigValidator::CONFIG_CHECK_KEYS = T.let(T.unsafe(nil), Set)

RuboCop::ConfigValidator::INTERNAL_PARAMS = T.let(T.unsafe(nil), Array)

RuboCop::ConfigValidator::NEW_COPS_VALUES = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Alignment::SPACE = T.let(T.unsafe(nil), String)

RuboCop::Cop::AllowedIdentifiers::SIGILS = T.let(T.unsafe(nil), String)

module RuboCop::Cop::AllowedMethods
  private

  # @api public
  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/cop/mixin/allowed_methods.rb#13
  def allowed_method?(name); end

  # @api public
  #
  # source://rubocop//lib/rubocop/cop/mixin/allowed_methods.rb#27
  def allowed_methods; end

  # source://rubocop//lib/rubocop/cop/mixin/allowed_methods.rb#35
  def cop_config_allowed_methods; end

  # source://rubocop//lib/rubocop/cop/mixin/allowed_methods.rb#39
  def cop_config_deprecated_values; end

  # @deprecated Use allowed_method? instead
  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/cop/mixin/allowed_methods.rb#18
  def ignored_method?; end
end

module RuboCop::Cop::AllowedPattern
  private

  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/cop/mixin/allowed_pattern.rb#10
  def allowed_line?(line); end

  # source://rubocop//lib/rubocop/cop/mixin/allowed_pattern.rb#42
  def allowed_patterns; end

  # source://rubocop//lib/rubocop/cop/mixin/allowed_pattern.rb#58
  def cop_config_deprecated_methods_values; end

  # source://rubocop//lib/rubocop/cop/mixin/allowed_pattern.rb#52
  def cop_config_patterns_values; end

  # @deprecated Use allowed_line? instead
  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/cop/mixin/allowed_pattern.rb#21
  def ignored_line?(line); end

  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/cop/mixin/allowed_pattern.rb#29
  def matches_allowed_pattern?(line); end

  # @deprecated Use matches_allowed_pattern? instead
  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/cop/mixin/allowed_pattern.rb#34
  def matches_ignored_pattern?(line); end
end

RuboCop::Cop::AmbiguousCopName::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::AnnotationComment::KEYWORDS_REGEX_CACHE = T.let(T.unsafe(nil), Hash)

module RuboCop::Cop::AutoCorrector
  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/cop/mixin/auto_corrector.rb#7
  def support_autocorrect?; end
end

module RuboCop::Cop::AutocorrectLogic
  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/cop/autocorrect_logic.rb#7
  def autocorrect?; end

  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/cop/autocorrect_logic.rb#31
  def autocorrect_enabled?; end

  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/cop/autocorrect_logic.rb#15
  def autocorrect_requested?; end

  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/cop/autocorrect_logic.rb#11
  def autocorrect_with_disable_uncorrectable?; end

  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/cop/autocorrect_logic.rb#19
  def correctable?; end

  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/cop/autocorrect_logic.rb#23
  def disable_uncorrectable?; end

  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/cop/autocorrect_logic.rb#27
  def safe_autocorrect?; end

  private

  # source://rubocop//lib/rubocop/cop/autocorrect_logic.rb#51
  def disable_offense(offense_range); end

  # source://rubocop//lib/rubocop/cop/autocorrect_logic.rb#135
  def disable_offense_at_end_of_line(range, eol_comment); end

  # source://rubocop//lib/rubocop/cop/autocorrect_logic.rb#139
  def disable_offense_before_and_after(range_by_lines); end

  # source://rubocop//lib/rubocop/cop/autocorrect_logic.rb#77
  def disable_offense_with_eol_or_surround_comment(range); end

  # source://rubocop//lib/rubocop/cop/autocorrect_logic.rb#96
  def heredoc_range(node); end

  # source://rubocop//lib/rubocop/cop/autocorrect_logic.rb#131
  def max_line_length; end

  # source://rubocop//lib/rubocop/cop/autocorrect_logic.rb#63
  def multiline_ranges(offense_range); end

  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/cop/autocorrect_logic.rb#108
  def multiline_string?(node); end

  # Expand the given range to include all of any lines it covers. Does not
  # include newline at end of the last line.
  #
  # source://rubocop//lib/rubocop/cop/autocorrect_logic.rb#121
  def range_by_lines(range); end

  # source://rubocop//lib/rubocop/cop/autocorrect_logic.rb#112
  def range_of_first_line(range); end

  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/cop/autocorrect_logic.rb#88
  def range_overlaps_offense?(offense_range, range); end

  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/cop/autocorrect_logic.rb#104
  def string_continuation?(node); end

  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/cop/autocorrect_logic.rb#92
  def surrounding_heredoc?(node); end

  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/cop/autocorrect_logic.rb#100
  def surrounding_percent_array?(node); end
end

class RuboCop::Cop::Base
  include ::RuboCop::AST::Sexp
  include ::RuboCop::PathUtil
  include ::RuboCop::Cop::Util
  include ::RuboCop::Cop::IgnoredNode
  include ::RuboCop::Cop::AutocorrectLogic
  extend ::RuboCop::AST::Sexp
  extend ::RuboCop::AST::NodePattern::Macros
  extend ::RuboCop::ExcludeLimit

  # @return [Base] a new instance of Base
  #
  # source://rubocop//lib/rubocop/cop/base.rb#156
  def initialize(config = T.unsafe(nil), options = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/cop/base.rb#278
  def active_support_extensions_enabled?; end

  # Adds an offense that has no particular location.
  # No correction can be applied to global offenses
  #
  # source://rubocop//lib/rubocop/cop/base.rb#189
  def add_global_offense(message = T.unsafe(nil), severity: T.unsafe(nil)); end

  # Adds an offense on the specified range (or node with an expression)
  # Unless that offense is disabled for this range, a corrector will be yielded
  # to provide the cop the opportunity to autocorrect the offense.
  # If message is not specified, the method `message` will be called.
  #
  # source://rubocop//lib/rubocop/cop/base.rb#201
  def add_offense(node_or_range, message: T.unsafe(nil), severity: T.unsafe(nil), &block); end

  # @api private
  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/cop/base.rb#357
  def always_autocorrect?; end

  # Called before any investigation
  #
  # @api private
  #
  # source://rubocop//lib/rubocop/cop/base.rb#343
  def begin_investigation(processed_source, offset: T.unsafe(nil), original: T.unsafe(nil)); end

  # @api private
  #
  # source://rubocop//lib/rubocop/cop/base.rb#324
  def callbacks_needed; end

  # Returns the value of attribute config.
  #
  # source://rubocop//lib/rubocop/cop/base.rb#43
  def config; end

  # source://rubocop//lib/rubocop/cop/base.rb#252
  def config_to_allow_offenses; end

  # source://rubocop//lib/rubocop/cop/base.rb#256
  def config_to_allow_offenses=(hash); end

  # @api private
  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/cop/base.rb#363
  def contextual_autocorrect?; end

  # Configuration Helpers
  #
  # source://rubocop//lib/rubocop/cop/base.rb#246
  def cop_config; end

  # source://rubocop//lib/rubocop/cop/base.rb#238
  def cop_name; end

  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/cop/base.rb#295
  def excluded_file?(file); end

  # This method should be overridden when a cop's behavior depends
  # on state that lives outside of these locations:
  #
  #   (1) the file under inspection
  #   (2) the cop's source code
  #   (3) the config (eg a .rubocop.yml file)
  #
  # For example, some cops may want to look at other parts of
  # the codebase being inspected to find violations. A cop may
  # use the presence or absence of file `foo.rb` to determine
  # whether a certain violation exists in `bar.rb`.
  #
  # Overriding this method allows the cop to indicate to RuboCop's
  # ResultCache system when those external dependencies change,
  # ie when the ResultCache should be invalidated.
  #
  # source://rubocop//lib/rubocop/cop/base.rb#234
  def external_dependency_checksum; end

  # source://rubocop//lib/rubocop/cop/base.rb#367
  def inspect; end

  # Gets called if no message is specified when calling `add_offense` or
  # `add_global_offense`
  # Cops are discouraged to override this; instead pass your message directly
  #
  # source://rubocop//lib/rubocop/cop/base.rb#183
  def message(_range = T.unsafe(nil)); end

  # source://rubocop//lib/rubocop/cop/base.rb#238
  def name; end

  # @deprecated Make potential errors with previous API more obvious
  #
  # source://rubocop//lib/rubocop/cop/base.rb#315
  def offenses; end

  # Called after all on_... have been called
  # When refining this method, always call `super`
  #
  # source://rubocop//lib/rubocop/cop/base.rb#170
  def on_investigation_end; end

  # Called before all on_... have been called
  # When refining this method, always call `super`
  #
  # source://rubocop//lib/rubocop/cop/base.rb#164
  def on_new_investigation; end

  # Called instead of all on_... callbacks for unrecognized files / syntax errors
  # When refining this method, always call `super`
  #
  # source://rubocop//lib/rubocop/cop/base.rb#176
  def on_other_file; end

  # There should be very limited reasons for a Cop to do it's own parsing
  #
  # source://rubocop//lib/rubocop/cop/base.rb#300
  def parse(source, path = T.unsafe(nil)); end

  # source://rubocop//lib/rubocop/cop/base.rb#270
  def parser_engine; end

  # Returns the value of attribute processed_source.
  #
  # source://rubocop//lib/rubocop/cop/base.rb#43
  def processed_source; end

  # Called between investigations
  #
  # @api private
  #
  # source://rubocop//lib/rubocop/cop/base.rb#306
  def ready; end

  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/cop/base.rb#286
  def relevant_file?(file); end

  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/cop/base.rb#282
  def string_literals_frozen_by_default?; end

  # Returns a gems locked versions (i.e. from Gemfile.lock or gems.locked)
  #
  # source://rubocop//lib/rubocop/cop/base.rb#266
  def target_gem_version(gem_name); end

  # source://rubocop//lib/rubocop/cop/base.rb#274
  def target_rails_version; end

  # source://rubocop//lib/rubocop/cop/base.rb#260
  def target_ruby_version; end

  private

  # source://rubocop//lib/rubocop/cop/base.rb#485
  def annotate(message); end

  # source://rubocop//lib/rubocop/cop/base.rb#379
  def apply_correction(corrector); end

  # @return [Symbol] offense status
  #
  # source://rubocop//lib/rubocop/cop/base.rb#449
  def attempt_correction(range, corrector); end

  # Reserved for Cop::Cop
  #
  # source://rubocop//lib/rubocop/cop/base.rb#375
  def callback_argument(range); end

  # Called to complete an investigation
  #
  # source://rubocop//lib/rubocop/cop/base.rb#408
  def complete_investigation; end

  # @return [Symbol, Corrector] offense status
  #
  # source://rubocop//lib/rubocop/cop/base.rb#423
  def correct(range); end

  # source://rubocop//lib/rubocop/cop/base.rb#393
  def current_corrector; end

  # Reserved for Commissioner:
  #
  # source://rubocop//lib/rubocop/cop/base.rb#385
  def current_offense_locations; end

  # source://rubocop//lib/rubocop/cop/base.rb#397
  def current_offenses; end

  # source://rubocop//lib/rubocop/cop/base.rb#389
  def currently_disabled_lines; end

  # source://rubocop//lib/rubocop/cop/base.rb#513
  def custom_severity; end

  # source://rubocop//lib/rubocop/cop/base.rb#509
  def default_severity; end

  # source://rubocop//lib/rubocop/cop/base.rb#463
  def disable_uncorrectable(range); end

  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/cop/base.rb#499
  def enabled_line?(line_number); end

  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/cop/base.rb#491
  def file_name_matches_any?(file, parameter, default_result); end

  # source://rubocop//lib/rubocop/cop/base.rb#481
  def find_message(range, message); end

  # source://rubocop//lib/rubocop/cop/base.rb#505
  def find_severity(_range, severity); end

  # source://rubocop//lib/rubocop/cop/base.rb#526
  def range_for_original(range); end

  # source://rubocop//lib/rubocop/cop/base.rb#470
  def range_from_node_or_range(node_or_range); end

  # Actually private methods
  #
  # source://rubocop//lib/rubocop/cop/base.rb#418
  def reset_investigation; end

  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/cop/base.rb#534
  def target_satisfies_all_gem_version_requirements?; end

  # @return [Symbol] offense status
  #
  # source://rubocop//lib/rubocop/cop/base.rb#438
  def use_corrector(range, corrector); end

  class << self
    # List of cops that should not try to autocorrect at the same
    # time as this cop
    #
    # @api public
    # @return [Array<RuboCop::Cop::Base>]
    #
    # source://rubocop//lib/rubocop/cop/base.rb#59
    def autocorrect_incompatible_with; end

    # Naming
    #
    # source://rubocop//lib/rubocop/cop/base.rb#93
    def badge; end

    # @api private
    #
    # source://rubocop//lib/rubocop/cop/base.rb#329
    def callbacks_needed; end

    # source://rubocop//lib/rubocop/cop/base.rb#97
    def cop_name; end

    # source://rubocop//lib/rubocop/cop/base.rb#101
    def department; end

    # Returns a url to view this cops documentation online.
    # Requires 'DocumentationBaseURL' to be set for your department.
    # Will follow the convention of RuboCops own documentation structure,
    # overwrite this method to accommodate your custom layout.
    #
    # @api public
    # @return [String, nil]
    #
    # source://rubocop//lib/rubocop/cop/base.rb#70
    def documentation_url(config = T.unsafe(nil)); end

    # Call for abstract Cop classes
    #
    # source://rubocop//lib/rubocop/cop/base.rb#81
    def exclude_from_registry; end

    # Returns the value of attribute gem_requirements.
    #
    # source://rubocop//lib/rubocop/cop/base.rb#138
    def gem_requirements; end

    # @private
    #
    # source://rubocop//lib/rubocop/cop/base.rb#74
    def inherited(subclass); end

    # Override and return the Force class(es) you need to join
    #
    # source://rubocop//lib/rubocop/cop/base.rb#118
    def joining_forces; end

    # @return [Boolean]
    #
    # source://rubocop//lib/rubocop/cop/base.rb#105
    def lint?; end

    # Returns true if the cop name or the cop namespace matches any of the
    # given names.
    #
    # @return [Boolean]
    #
    # source://rubocop//lib/rubocop/cop/base.rb#111
    def match?(given_names); end

    # Register a version requirement for the given gem name.
    # This cop will be skipped unless the target satisfies *all* requirements.
    #
    # @api public
    # @param gem_name [String]
    # @param version_requirements [Array<String>] The version requirements,
    #   using the same syntax as a Gemfile, e.g. ">= 1.2.3"
    #
    #   If omitted, any version of the gem will be accepted.
    #
    #   https://guides.rubygems.org/patterns/#declaring-dependencies
    #
    # source://rubocop//lib/rubocop/cop/base.rb#151
    def requires_gem(gem_name, *version_requirements); end

    # Returns if class supports autocorrect.
    # It is recommended to extend AutoCorrector instead of overriding
    #
    # @return [Boolean]
    #
    # source://rubocop//lib/rubocop/cop/base.rb#87
    def support_autocorrect?; end

    # Override if your cop should be called repeatedly for multiple investigations
    # Between calls to `on_new_investigation` and `on_investigation_end`,
    # the result of `processed_source` will remain constant.
    # You should invalidate any caches that depend on the current `processed_source`
    # in the `on_new_investigation` callback.
    # If your cop does autocorrections, be aware that your instance may be called
    # multiple times with the same `processed_source.path` but different content.
    #
    # @return [Boolean]
    #
    # source://rubocop//lib/rubocop/cop/base.rb#129
    def support_multiple_source?; end

    private

    # source://rubocop//lib/rubocop/cop/base.rb#401
    def restrict_on_send; end
  end
end

RuboCop::Cop::Base::EMPTY_OFFENSES = T.let(T.unsafe(nil), Array)

class RuboCop::Cop::Base::InvestigationReport < ::Struct
  # Returns the value of attribute cop
  #
  # @return [Object] the current value of cop
  def cop; end

  # Sets the attribute cop
  #
  # @param value [Object] the value to set the attribute cop to.
  # @return [Object] the newly set value
  def cop=(_); end

  # Returns the value of attribute corrector
  #
  # @return [Object] the current value of corrector
  def corrector; end

  # Sets the attribute corrector
  #
  # @param value [Object] the value to set the attribute corrector to.
  # @return [Object] the newly set value
  def corrector=(_); end

  # Returns the value of attribute offenses
  #
  # @return [Object] the current value of offenses
  def offenses; end

  # Sets the attribute offenses
  #
  # @param value [Object] the value to set the attribute offenses to.
  # @return [Object] the newly set value
  def offenses=(_); end

  # Returns the value of attribute processed_source
  #
  # @return [Object] the current value of processed_source
  def processed_source; end

  # Sets the attribute processed_source
  #
  # @param value [Object] the value to set the attribute processed_source to.
  # @return [Object] the newly set value
  def processed_source=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

RuboCop::Cop::Base::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Set)

RuboCop::Cop::Bundler::DuplicatedGem::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Bundler::DuplicatedGroup::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Bundler::DuplicatedGroup::SOURCE_BLOCK_NAMES = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Bundler::GemComment::CHECKED_OPTIONS_CONFIG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Bundler::GemComment::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Bundler::GemComment::RESTRICTIVE_VERSION_PATTERN = T.let(T.unsafe(nil), Regexp)

RuboCop::Cop::Bundler::GemComment::RESTRICTIVE_VERSION_SPECIFIERS_OPTION = T.let(T.unsafe(nil), String)

RuboCop::Cop::Bundler::GemComment::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Bundler::GemComment::VERSION_SPECIFIERS_OPTION = T.let(T.unsafe(nil), String)

RuboCop::Cop::Bundler::GemFilename::GEMFILE_FILES = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Bundler::GemFilename::GEMS_RB_FILES = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Bundler::GemFilename::MSG_GEMFILE_MISMATCHED = T.let(T.unsafe(nil), String)

RuboCop::Cop::Bundler::GemFilename::MSG_GEMFILE_REQUIRED = T.let(T.unsafe(nil), String)

RuboCop::Cop::Bundler::GemFilename::MSG_GEMS_RB_MISMATCHED = T.let(T.unsafe(nil), String)

RuboCop::Cop::Bundler::GemFilename::MSG_GEMS_RB_REQUIRED = T.let(T.unsafe(nil), String)

RuboCop::Cop::Bundler::GemVersion::FORBIDDEN_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Bundler::GemVersion::REQUIRED_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Bundler::GemVersion::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Bundler::GemVersion::VERSION_SPECIFICATION_REGEX = T.let(T.unsafe(nil), Regexp)

RuboCop::Cop::Bundler::InsecureProtocolSource::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Bundler::InsecureProtocolSource::MSG_HTTP_PROTOCOL = T.let(T.unsafe(nil), String)

RuboCop::Cop::Bundler::InsecureProtocolSource::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Bundler::OrderedGems::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::CodeLength::MSG = T.let(T.unsafe(nil), String)

module RuboCop::Cop::CommentsHelp
  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/cop/mixin/comments_help.rb#27
  def comments_contain_disables?(node, cop_name); end

  # source://rubocop//lib/rubocop/cop/mixin/comments_help.rb#18
  def comments_in_range(node); end

  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/cop/mixin/comments_help.rb#14
  def contains_comments?(node); end

  # source://rubocop//lib/rubocop/cop/mixin/comments_help.rb#7
  def source_range_with_comment(node); end

  private

  # source://rubocop//lib/rubocop/cop/mixin/comments_help.rb#46
  def begin_pos_with_comment(node); end

  # source://rubocop//lib/rubocop/cop/mixin/comments_help.rb#60
  def buffer; end

  # source://rubocop//lib/rubocop/cop/mixin/comments_help.rb#41
  def end_position_for(node); end

  # Returns the end line of a node, which might be a comment and not part of the AST
  # End line is considered either the line at which another node starts, or
  # the line at which the parent node ends.
  #
  # source://rubocop//lib/rubocop/cop/mixin/comments_help.rb#68
  def find_end_line(node); end

  # source://rubocop//lib/rubocop/cop/mixin/comments_help.rb#56
  def start_line_position(node); end
end

RuboCop::Cop::Commissioner::RESTRICTED_CALLBACKS = T.let(T.unsafe(nil), Array)

RuboCop::Cop::ConfigurableEnforcedStyle::SYMBOL_TO_STRING_CACHE = T.let(T.unsafe(nil), Hash)

module RuboCop::Cop::ConfigurableFormatting
  include ::RuboCop::Cop::ConfigurableEnforcedStyle

  # source://rubocop//lib/rubocop/cop/mixin/configurable_formatting.rb#9
  def check_name(node, name, name_range); end

  # A class emitter method is a singleton method in a class/module, where
  # the method has the same name as a class defined in the class/module.
  #
  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/cop/mixin/configurable_formatting.rb#30
  def class_emitter_method?(node, name); end

  # source://rubocop//lib/rubocop/cop/mixin/configurable_formatting.rb#17
  def report_opposing_styles(node, name); end

  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/cop/mixin/configurable_formatting.rb#24
  def valid_name?(node, name, given_style = T.unsafe(nil)); end
end

module RuboCop::Cop::ConfigurableNaming
  include ::RuboCop::Cop::ConfigurableEnforcedStyle
  include ::RuboCop::Cop::ConfigurableFormatting
end

RuboCop::Cop::ConfigurableNaming::FORMATS = T.let(T.unsafe(nil), Hash)

RuboCop::Cop::ConfigurableNumbering::FORMATS = T.let(T.unsafe(nil), Hash)

class RuboCop::Cop::Corrector < ::Parser::Source::TreeRewriter
  # corrector = Corrector.new(cop)
  #
  # @param source [Parser::Source::Buffer, or anything
  # leading to one via `(processed_source.)buffer`]
  # @return [Corrector] a new instance of Corrector
  #
  # source://rubocop//lib/rubocop/cop/corrector.rb#32
  def initialize(source); end

  # Removes `size` characters from the beginning of the given range.
  # If `size` is greater than the size of `range`, the removed region can
  # overrun the end of `range`.
  #
  # @param range [Parser::Source::Range, RuboCop::AST::Node] or node
  # @param size [Integer]
  #
  # source://rubocop//lib/rubocop/cop/corrector.rb#63
  def remove_leading(node_or_range, size); end

  # Removes `size` characters prior to the source range.
  #
  # @param range [Parser::Source::Range, RuboCop::AST::Node] or node
  # @param size [Integer]
  #
  # source://rubocop//lib/rubocop/cop/corrector.rb#51
  def remove_preceding(node_or_range, size); end

  # Removes `size` characters from the end of the given range.
  # If `size` is greater than the size of `range`, the removed region can
  # overrun the beginning of `range`.
  #
  # @param range [Parser::Source::Range, RuboCop::AST::Node] or node
  # @param size [Integer]
  #
  # source://rubocop//lib/rubocop/cop/corrector.rb#75
  def remove_trailing(node_or_range, size); end

  # Legacy
  #
  # source://parser/3.3.8.0/lib/parser/source/tree_rewriter.rb#252
  def rewrite; end

  # Swaps sources at the given ranges.
  #
  # @param node_or_range1 [Parser::Source::Range, RuboCop::AST::Node]
  # @param node_or_range2 [Parser::Source::Range, RuboCop::AST::Node]
  #
  # source://rubocop//lib/rubocop/cop/corrector.rb#85
  def swap(node_or_range1, node_or_range2); end

  private

  # source://rubocop//lib/rubocop/cop/corrector.rb#119
  def check_range_validity(node_or_range); end

  # source://rubocop//lib/rubocop/cop/corrector.rb#104
  def to_range(node_or_range); end

  # source://rubocop//lib/rubocop/cop/corrector.rb#123
  def validate_buffer(buffer); end

  class << self
    # Duck typing for get to a ::Parser::Source::Buffer
    #
    # source://rubocop//lib/rubocop/cop/corrector.rb#15
    def source_buffer(source); end
  end
end

RuboCop::Cop::Corrector::NOOP_CONSUMER = T.let(T.unsafe(nil), Proc)

RuboCop::Cop::EachToForCorrector::CORRECTION_WITHOUT_ARGUMENTS = T.let(T.unsafe(nil), String)

RuboCop::Cop::EachToForCorrector::CORRECTION_WITH_ARGUMENTS = T.let(T.unsafe(nil), String)

RuboCop::Cop::EndKeywordAlignment::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::ForToEachCorrector::CORRECTION = T.let(T.unsafe(nil), String)

RuboCop::Cop::ForbiddenIdentifiers::SIGILS = T.let(T.unsafe(nil), String)

RuboCop::Cop::FrozenStringLiteral::FROZEN_STRING_LITERAL_ENABLED = T.let(T.unsafe(nil), String)

RuboCop::Cop::FrozenStringLiteral::FROZEN_STRING_LITERAL_TYPES_RUBY27 = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Gemspec::AddRuntimeDependency::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Gemspec::AddRuntimeDependency::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Gemspec::DependencyVersion::ADD_DEPENDENCY_METHODS = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Gemspec::DependencyVersion::FORBIDDEN_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Gemspec::DependencyVersion::REQUIRED_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Gemspec::DependencyVersion::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Gemspec::DependencyVersion::VERSION_SPECIFICATION_REGEX = T.let(T.unsafe(nil), Regexp)

RuboCop::Cop::Gemspec::DeprecatedAttributeAssignment::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Gemspec::DevelopmentDependencies::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Gemspec::DevelopmentDependencies::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Gemspec::DuplicatedAssignment::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Gemspec::OrderedDependencies::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Gemspec::RequireMFA::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Gemspec::RequiredRubyVersion::MISSING_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Gemspec::RequiredRubyVersion::NOT_EQUAL_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Gemspec::RequiredRubyVersion::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Gemspec::RubyVersionGlobalsUsage::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Generator::CONFIGURATION_ADDED_MESSAGE = T.let(T.unsafe(nil), String)

RuboCop::Cop::Generator::ConfigurationInjector::TEMPLATE = T.let(T.unsafe(nil), String)

RuboCop::Cop::Generator::RequireFileInjector::REQUIRE_PATH = T.let(T.unsafe(nil), Regexp)

RuboCop::Cop::Generator::SOURCE_TEMPLATE = T.let(T.unsafe(nil), String)

RuboCop::Cop::Generator::SPEC_TEMPLATE = T.let(T.unsafe(nil), String)

RuboCop::Cop::HashShorthandSyntax::DO_NOT_MIX_EXPLICIT_VALUE_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::HashShorthandSyntax::DO_NOT_MIX_MSG_PREFIX = T.let(T.unsafe(nil), String)

RuboCop::Cop::HashShorthandSyntax::DO_NOT_MIX_OMIT_VALUE_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::HashShorthandSyntax::EXPLICIT_HASH_VALUE_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::HashShorthandSyntax::OMIT_HASH_VALUE_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::HashSubset::ACTIVE_SUPPORT_SUBSET_METHODS = T.let(T.unsafe(nil), Array)

RuboCop::Cop::HashSubset::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::HashSubset::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::HashSubset::SUBSET_METHODS = T.let(T.unsafe(nil), Array)

RuboCop::Cop::HashTransformMethod::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Heredoc::OPENING_DELIMITER = T.let(T.unsafe(nil), Regexp)

RuboCop::Cop::IfThenCorrector::DEFAULT_INDENTATION_WIDTH = T.let(T.unsafe(nil), Integer)

RuboCop::Cop::IgnoredMethods = RuboCop::Cop::AllowedMethods

module RuboCop::Cop::IgnoredNode
  # source://rubocop//lib/rubocop/cop/ignored_node.rb#7
  def ignore_node(node); end

  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/cop/ignored_node.rb#24
  def ignored_node?(node); end

  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/cop/ignored_node.rb#11
  def part_of_ignored_node?(node); end

  private

  # source://rubocop//lib/rubocop/cop/ignored_node.rb#31
  def ignored_nodes; end
end

RuboCop::Cop::IgnoredPattern = RuboCop::Cop::AllowedPattern

RuboCop::Cop::Layout::AccessModifierIndentation::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::ArgumentAlignment::ALIGN_PARAMS_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::ArgumentAlignment::FIXED_INDENT_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::ArrayAlignment::ALIGN_ELEMENTS_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::ArrayAlignment::FIXED_INDENT_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::AssignmentIndentation::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::BeginEndAlignment::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::BlockAlignment::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::BlockEndNewline::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::CaseIndentation::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::ClassStructure::HUMANIZED_NODE_TYPE = T.let(T.unsafe(nil), Hash)

RuboCop::Cop::Layout::ClassStructure::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::ClosingHeredocIndentation::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::ClosingHeredocIndentation::MSG_ARG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::ClosingHeredocIndentation::SIMPLE_HEREDOC = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::ClosingParenthesisIndentation::MSG_ALIGN = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::ClosingParenthesisIndentation::MSG_INDENT = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::CommentIndentation::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::ConditionPosition::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::DefEndAlignment::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::ElseAlignment::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::EmptyComment::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::EmptyLineAfterGuardClause::END_OF_HEREDOC_LINE = T.let(T.unsafe(nil), Integer)

RuboCop::Cop::Layout::EmptyLineAfterGuardClause::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::EmptyLineAfterGuardClause::SIMPLE_DIRECTIVE_COMMENT_PATTERN = T.let(T.unsafe(nil), Regexp)

RuboCop::Cop::Layout::EmptyLineAfterMagicComment::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::EmptyLineAfterMultilineCondition::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::EmptyLineBetweenDefs::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::EmptyLines::LINE_OFFSET = T.let(T.unsafe(nil), Integer)

RuboCop::Cop::Layout::EmptyLines::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::EmptyLinesAroundAccessModifier::MSG_AFTER = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::EmptyLinesAroundAccessModifier::MSG_AFTER_FOR_ONLY_BEFORE = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::EmptyLinesAroundAccessModifier::MSG_BEFORE_AND_AFTER = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::EmptyLinesAroundAccessModifier::MSG_BEFORE_FOR_ONLY_BEFORE = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::EmptyLinesAroundAccessModifier::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Layout::EmptyLinesAroundArguments::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::EmptyLinesAroundAttributeAccessor::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::EmptyLinesAroundBeginBody::KIND = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::EmptyLinesAroundBlockBody::KIND = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::EmptyLinesAroundBody::MSG_DEFERRED = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::EmptyLinesAroundBody::MSG_EXTRA = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::EmptyLinesAroundBody::MSG_MISSING = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::EmptyLinesAroundClassBody::KIND = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::EmptyLinesAroundExceptionHandlingKeywords::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::EmptyLinesAroundMethodBody::KIND = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::EmptyLinesAroundModuleBody::KIND = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::EndOfLine::MSG_DETECTED = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::EndOfLine::MSG_MISSING = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::ExtraSpacing::MSG_UNALIGNED_ASGN = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::ExtraSpacing::MSG_UNNECESSARY = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::FirstArgumentIndentation::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::FirstArrayElementIndentation::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::FirstArrayElementLineBreak::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::FirstHashElementIndentation::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::FirstHashElementLineBreak::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::FirstMethodArgumentLineBreak::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::FirstMethodParameterLineBreak::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::FirstParameterIndentation::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::HashAlignment::MESSAGES = T.let(T.unsafe(nil), Hash)

RuboCop::Cop::Layout::HashAlignment::SEPARATOR_ALIGNMENT_STYLES = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Layout::HeredocArgumentClosingParenthesis::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::HeredocIndentation::TYPE_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::HeredocIndentation::WIDTH_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::IndentationConsistency::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::IndentationStyle::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::IndentationWidth::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::InitialIndentation::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::LeadingCommentSpace::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::LeadingEmptyLines::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::LineContinuationLeadingSpace::LEADING_STYLE_OFFENSE = T.let(T.unsafe(nil), Regexp)

RuboCop::Cop::Layout::LineContinuationLeadingSpace::LINE_1_ENDING = T.let(T.unsafe(nil), Regexp)

RuboCop::Cop::Layout::LineContinuationLeadingSpace::LINE_2_BEGINNING = T.let(T.unsafe(nil), Regexp)

RuboCop::Cop::Layout::LineContinuationLeadingSpace::TRAILING_STYLE_OFFENSE = T.let(T.unsafe(nil), Regexp)

RuboCop::Cop::Layout::LineEndStringConcatenationIndentation::MSG_ALIGN = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::LineEndStringConcatenationIndentation::MSG_INDENT = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::LineEndStringConcatenationIndentation::PARENT_TYPES_FOR_INDENTED = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Layout::LineLength::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::MultilineArrayBraceLayout::ALWAYS_NEW_LINE_MESSAGE = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::MultilineArrayBraceLayout::ALWAYS_SAME_LINE_MESSAGE = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::MultilineArrayBraceLayout::NEW_LINE_MESSAGE = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::MultilineArrayBraceLayout::SAME_LINE_MESSAGE = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::MultilineArrayLineBreaks::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::MultilineAssignmentLayout::NEW_LINE_OFFENSE = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::MultilineAssignmentLayout::SAME_LINE_OFFENSE = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::MultilineBlockLayout::ARG_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::MultilineBlockLayout::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::MultilineBlockLayout::PIPE_SIZE = T.let(T.unsafe(nil), Integer)

RuboCop::Cop::Layout::MultilineHashBraceLayout::ALWAYS_NEW_LINE_MESSAGE = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::MultilineHashBraceLayout::ALWAYS_SAME_LINE_MESSAGE = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::MultilineHashBraceLayout::NEW_LINE_MESSAGE = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::MultilineHashBraceLayout::SAME_LINE_MESSAGE = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::MultilineHashKeyLineBreaks::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::MultilineMethodArgumentLineBreaks::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::MultilineMethodCallBraceLayout::ALWAYS_NEW_LINE_MESSAGE = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::MultilineMethodCallBraceLayout::ALWAYS_SAME_LINE_MESSAGE = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::MultilineMethodCallBraceLayout::NEW_LINE_MESSAGE = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::MultilineMethodCallBraceLayout::SAME_LINE_MESSAGE = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::MultilineMethodDefinitionBraceLayout::ALWAYS_NEW_LINE_MESSAGE = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::MultilineMethodDefinitionBraceLayout::ALWAYS_SAME_LINE_MESSAGE = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::MultilineMethodDefinitionBraceLayout::NEW_LINE_MESSAGE = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::MultilineMethodDefinitionBraceLayout::SAME_LINE_MESSAGE = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::MultilineMethodParameterLineBreaks::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::ParameterAlignment::ALIGN_PARAMS_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::ParameterAlignment::FIXED_INDENT_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::RedundantLineBreak::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::RescueEnsureAlignment::ALTERNATIVE_ACCESS_MODIFIERS = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Layout::RescueEnsureAlignment::ANCESTOR_TYPES = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Layout::RescueEnsureAlignment::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::SingleLineBlockChain::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::SpaceAfterColon::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::SpaceAfterMethodName::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::SpaceAfterNot::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::SpaceAfterNot::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Layout::SpaceAroundEqualsInParameterDefault::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::SpaceAroundKeyword::ACCEPT_LEFT_PAREN = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Layout::SpaceAroundKeyword::ACCEPT_LEFT_SQUARE_BRACKET = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Layout::SpaceAroundKeyword::ACCEPT_NAMESPACE_OPERATOR = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::SpaceAroundKeyword::DO = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::SpaceAroundKeyword::MSG_AFTER = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::SpaceAroundKeyword::MSG_BEFORE = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::SpaceAroundKeyword::NAMESPACE_OPERATOR = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::SpaceAroundKeyword::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Layout::SpaceAroundKeyword::SAFE_NAVIGATION = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::SpaceAroundMethodCallOperator::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::SpaceAroundMethodCallOperator::SPACES_REGEXP = T.let(T.unsafe(nil), Regexp)

RuboCop::Cop::Layout::SpaceAroundOperators::EXCESSIVE_SPACE = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::SpaceAroundOperators::IRREGULAR_METHODS = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Layout::SpaceBeforeBlockBraces::DETECTED_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::SpaceBeforeBlockBraces::MISSING_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::SpaceBeforeBrackets::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::SpaceBeforeBrackets::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Layout::SpaceBeforeComment::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::SpaceBeforeFirstArg::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::SpaceInLambdaLiteral::MSG_REQUIRE_NO_SPACE = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::SpaceInLambdaLiteral::MSG_REQUIRE_SPACE = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::SpaceInsideArrayLiteralBrackets::EMPTY_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::SpaceInsideArrayLiteralBrackets::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::SpaceInsideArrayPercentLiteral::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::SpaceInsideArrayPercentLiteral::MULTIPLE_SPACES_BETWEEN_ITEMS_REGEX = T.let(T.unsafe(nil), Regexp)

RuboCop::Cop::Layout::SpaceInsideHashLiteralBraces::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::SpaceInsideParens::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::SpaceInsideParens::MSG_SPACE = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::SpaceInsidePercentLiteralDelimiters::BEGIN_REGEX = T.let(T.unsafe(nil), Regexp)

RuboCop::Cop::Layout::SpaceInsidePercentLiteralDelimiters::END_REGEX = T.let(T.unsafe(nil), Regexp)

RuboCop::Cop::Layout::SpaceInsidePercentLiteralDelimiters::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::SpaceInsideRangeLiteral::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::SpaceInsideReferenceBrackets::EMPTY_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::SpaceInsideReferenceBrackets::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::SpaceInsideReferenceBrackets::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Layout::SpaceInsideStringInterpolation::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Layout::TrailingWhitespace::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::AmbiguousAssignment::MISTAKES = T.let(T.unsafe(nil), Hash)

RuboCop::Cop::Lint::AmbiguousAssignment::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::AmbiguousAssignment::SIMPLE_ASSIGNMENT_TYPES = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Lint::AmbiguousBlockAssociation::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::AmbiguousOperator::AMBIGUITIES = T.let(T.unsafe(nil), Hash)

RuboCop::Cop::Lint::AmbiguousOperator::MSG_FORMAT = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::AmbiguousOperatorPrecedence::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::AmbiguousOperatorPrecedence::PRECEDENCE = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Lint::AmbiguousOperatorPrecedence::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Lint::AmbiguousRange::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::AmbiguousRegexpLiteral::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::ArrayLiteralInRegexp::LITERAL_TYPES = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Lint::ArrayLiteralInRegexp::MSG_ALTERNATION = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::ArrayLiteralInRegexp::MSG_CHARACTER_CLASS = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::ArrayLiteralInRegexp::MSG_UNKNOWN = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::AssignmentInCondition::ASGN_TYPES = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Lint::AssignmentInCondition::MSG_WITHOUT_SAFE_ASSIGNMENT_ALLOWED = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::AssignmentInCondition::MSG_WITH_SAFE_ASSIGNMENT_ALLOWED = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::BigDecimalNew::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::BigDecimalNew::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Lint::BinaryOperatorWithIdenticalOperands::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::BinaryOperatorWithIdenticalOperands::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Lint::BooleanSymbol::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::CircularArgumentReference::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::ConstantDefinitionInBlock::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::ConstantOverwrittenInRescue::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::ConstantReassignment::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::ConstantReassignment::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Lint::ConstantResolution::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::CopDirectiveSyntax::COMMON_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::CopDirectiveSyntax::INVALID_MODE_NAME_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::CopDirectiveSyntax::MALFORMED_COP_NAMES_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::CopDirectiveSyntax::MISSING_COP_NAME_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::CopDirectiveSyntax::MISSING_MODE_NAME_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::Debugger::BLOCK_TYPES = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Lint::Debugger::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::DeprecatedClassMethods::DIR_ENV_FILE_CONSTANTS = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Lint::DeprecatedClassMethods::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::DeprecatedClassMethods::PREFERRED_METHODS = T.let(T.unsafe(nil), Hash)

RuboCop::Cop::Lint::DeprecatedClassMethods::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Lint::DeprecatedConstants::DO_NOT_USE_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::DeprecatedConstants::SUGGEST_GOOD_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::DeprecatedOpenSSLConstant::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::DeprecatedOpenSSLConstant::NO_ARG_ALGORITHM = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Lint::DeprecatedOpenSSLConstant::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Lint::DisjunctiveAssignmentInConstructor::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::DuplicateBranch::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::DuplicateCaseCondition::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::DuplicateElsifCondition::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::DuplicateHashKey::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::DuplicateMagicComment::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::DuplicateMatchPattern::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::DuplicateMethods::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::DuplicateMethods::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Lint::DuplicateRegexpCharacterClassElement::MSG_REPEATED_ELEMENT = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::DuplicateRegexpCharacterClassElement::OCTAL_DIGITS_AFTER_ESCAPE = T.let(T.unsafe(nil), Integer)

RuboCop::Cop::Lint::DuplicateRequire::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::DuplicateRequire::REQUIRE_METHODS = T.let(T.unsafe(nil), Set)

RuboCop::Cop::Lint::DuplicateRequire::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Set)

RuboCop::Cop::Lint::DuplicateRescueException::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::DuplicateSetElement::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::DuplicateSetElement::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Lint::EachWithObjectArgument::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::EachWithObjectArgument::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Lint::ElseLayout::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::EmptyBlock::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::EmptyClass::CLASS_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::EmptyClass::METACLASS_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::EmptyConditionalBody::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::EmptyEnsure::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::EmptyExpression::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::EmptyFile::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::EmptyInPattern::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::EmptyInterpolation::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::EmptyWhen::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::EnsureReturn::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::ErbNewArguments::MESSAGE_EOUTVAR = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::ErbNewArguments::MESSAGE_SAFE_LEVEL = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::ErbNewArguments::MESSAGE_TRIM_MODE = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::ErbNewArguments::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Lint::FlipFlop::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::FloatComparison::EQUALITY_METHODS = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Lint::FloatComparison::FLOAT_INSTANCE_METHODS = T.let(T.unsafe(nil), Set)

RuboCop::Cop::Lint::FloatComparison::FLOAT_RETURNING_METHODS = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Lint::FloatComparison::MSG_EQUALITY = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::FloatComparison::MSG_INEQUALITY = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::FloatComparison::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Lint::FloatOutOfRange::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::FormatParameterMismatch::KERNEL = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::FormatParameterMismatch::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::FormatParameterMismatch::MSG_INVALID = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::FormatParameterMismatch::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Lint::FormatParameterMismatch::SHOVEL = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::FormatParameterMismatch::STRING_TYPES = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Lint::HashCompareByIdentity::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::HashCompareByIdentity::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Lint::HashNewWithKeywordArgumentsAsDefault::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::HashNewWithKeywordArgumentsAsDefault::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Lint::HeredocMethodCallPosition::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::IdentityComparison::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::IdentityComparison::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Lint::ImplicitStringConcatenation::FOR_ARRAY = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::ImplicitStringConcatenation::FOR_METHOD = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::ImplicitStringConcatenation::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::IncompatibleIoSelectWithFiberScheduler::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::IncompatibleIoSelectWithFiberScheduler::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Lint::IneffectiveAccessModifier::ALTERNATIVE_PRIVATE = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::IneffectiveAccessModifier::ALTERNATIVE_PROTECTED = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::IneffectiveAccessModifier::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::InheritException::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::InheritException::PREFERRED_BASE_CLASS = T.let(T.unsafe(nil), Hash)

RuboCop::Cop::Lint::InheritException::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Lint::InterpolationCheck::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::ItWithoutArgumentsInBlock::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::ItWithoutArgumentsInBlock::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Lint::LambdaWithoutLiteralBlock::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::LambdaWithoutLiteralBlock::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Lint::LiteralAsCondition::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::LiteralAsCondition::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Lint::LiteralAssignmentInCondition::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::LiteralInInterpolation::COMPOSITE = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Lint::LiteralInInterpolation::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::Loop::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::MissingCopEnableDirective::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::MissingCopEnableDirective::MSG_BOUND = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::MissingSuper::CALLBACKS = T.let(T.unsafe(nil), Set)

RuboCop::Cop::Lint::MissingSuper::CALLBACK_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::MissingSuper::CLASS_LIFECYCLE_CALLBACKS = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Lint::MissingSuper::CONSTRUCTOR_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::MissingSuper::METHOD_LIFECYCLE_CALLBACKS = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Lint::MissingSuper::STATELESS_CLASSES = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Lint::MixedCaseRange::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::MixedCaseRange::RANGES = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Lint::MixedRegexpCaptureTypes::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::MultipleComparison::COMPARISON_METHODS = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Lint::MultipleComparison::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::MultipleComparison::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Lint::MultipleComparison::SET_OPERATION_OPERATORS = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Lint::NestedMethodDefinition::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::NestedPercentLiteral::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::NestedPercentLiteral::PERCENT_LITERAL_TYPES = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Lint::NestedPercentLiteral::REGEXES = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Lint::NextWithoutAccumulator::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::NoReturnInBeginEndBlocks::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::NonAtomicFileOperation::MAKE_FORCE_METHODS = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Lint::NonAtomicFileOperation::MAKE_METHODS = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Lint::NonAtomicFileOperation::MSG_CHANGE_FORCE_METHOD = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::NonAtomicFileOperation::MSG_REMOVE_FILE_EXIST_CHECK = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::NonAtomicFileOperation::RECURSIVE_REMOVE_METHODS = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Lint::NonAtomicFileOperation::REMOVE_FORCE_METHODS = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Lint::NonAtomicFileOperation::REMOVE_METHODS = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Lint::NonAtomicFileOperation::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Lint::NonDeterministicRequireOrder::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::NonLocalExitFromIterator::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::NumberConversion::CONVERSION_METHODS = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Lint::NumberConversion::CONVERSION_METHOD_CLASS_MAPPING = T.let(T.unsafe(nil), Hash)

RuboCop::Cop::Lint::NumberConversion::METHODS = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::NumberConversion::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::NumberedParameterAssignment::LVAR_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::NumberedParameterAssignment::NUMBERED_PARAMETER_RANGE = T.let(T.unsafe(nil), Range)

RuboCop::Cop::Lint::NumberedParameterAssignment::NUM_PARAM_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::NumericOperationWithConstantResult::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::NumericOperationWithConstantResult::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Lint::OrAssignmentToConstant::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::OrderedMagicComments::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::OutOfRangeRegexpRef::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::OutOfRangeRegexpRef::REGEXP_ARGUMENT_METHODS = T.let(T.unsafe(nil), Set)

RuboCop::Cop::Lint::OutOfRangeRegexpRef::REGEXP_CAPTURE_METHODS = T.let(T.unsafe(nil), Set)

RuboCop::Cop::Lint::OutOfRangeRegexpRef::REGEXP_RECEIVER_METHODS = T.let(T.unsafe(nil), Set)

RuboCop::Cop::Lint::OutOfRangeRegexpRef::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Set)

RuboCop::Cop::Lint::ParenthesesAsGroupedExpression::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::PercentStringArray::LEADING_QUOTE = T.let(T.unsafe(nil), Regexp)

RuboCop::Cop::Lint::PercentStringArray::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::PercentStringArray::QUOTES_AND_COMMAS = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Lint::PercentStringArray::TRAILING_QUOTE = T.let(T.unsafe(nil), Regexp)

RuboCop::Cop::Lint::PercentSymbolArray::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::RaiseException::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::RaiseException::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Lint::RandOne::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::RandOne::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Lint::RedundantCopDisableDirective::COP_NAME = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::RedundantCopDisableDirective::DEPARTMENT_MARKER = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::RedundantCopDisableDirective::SIMILAR_COP_NAMES_CACHE = T.let(T.unsafe(nil), Hash)

RuboCop::Cop::Lint::RedundantCopEnableDirective::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::RedundantDirGlobSort::GLOB_METHODS = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Lint::RedundantDirGlobSort::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::RedundantDirGlobSort::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Lint::RedundantRegexpQuantifiers::MSG_REDUNDANT_QUANTIFIER = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::RedundantRequireStatement::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::RedundantRequireStatement::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Lint::RedundantRequireStatement::RUBY_22_LOADED_FEATURES = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Lint::RedundantSafeNavigation::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::RedundantSafeNavigation::MSG_LITERAL = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::RedundantSafeNavigation::NIL_SPECIFIC_METHODS = T.let(T.unsafe(nil), Set)

RuboCop::Cop::Lint::RedundantSafeNavigation::SNAKE_CASE = T.let(T.unsafe(nil), Regexp)

RuboCop::Cop::Lint::RedundantSplatExpansion::ARRAY_PARAM_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::RedundantSplatExpansion::ASSIGNMENT_TYPES = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Lint::RedundantSplatExpansion::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::RedundantSplatExpansion::PERCENT_CAPITAL_I = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::RedundantSplatExpansion::PERCENT_CAPITAL_W = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::RedundantSplatExpansion::PERCENT_I = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::RedundantSplatExpansion::PERCENT_W = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::RedundantStringCoercion::MSG_DEFAULT = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::RedundantStringCoercion::MSG_SELF = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::RedundantStringCoercion::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Lint::RedundantTypeConversion::CONSTRUCTOR_MAPPING = T.let(T.unsafe(nil), Hash)

RuboCop::Cop::Lint::RedundantTypeConversion::CONVERSION_METHODS = T.let(T.unsafe(nil), Set)

RuboCop::Cop::Lint::RedundantTypeConversion::LITERAL_NODE_TYPES = T.let(T.unsafe(nil), Hash)

RuboCop::Cop::Lint::RedundantTypeConversion::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::RedundantTypeConversion::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Set)

RuboCop::Cop::Lint::RedundantTypeConversion::TYPED_METHODS = T.let(T.unsafe(nil), Hash)

RuboCop::Cop::Lint::RedundantWithIndex::MSG_EACH_WITH_INDEX = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::RedundantWithIndex::MSG_WITH_INDEX = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::RedundantWithObject::MSG_EACH_WITH_OBJECT = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::RedundantWithObject::MSG_WITH_OBJECT = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::RefinementImportMethods::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::RefinementImportMethods::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Lint::RegexpAsCondition::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::RequireParentheses::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::RequireRangeParentheses::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::RequireRelativeSelfPath::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::RequireRelativeSelfPath::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Lint::RescueException::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::RescueType::INVALID_TYPES = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Lint::RescueType::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::ReturnInVoidContext::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::ReturnInVoidContext::SCOPE_CHANGING_METHODS = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Lint::SafeNavigationChain::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::SafeNavigationChain::PLUS_MINUS_METHODS = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Lint::SafeNavigationConsistency::USE_DOT_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::SafeNavigationConsistency::USE_SAFE_NAVIGATION_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::SafeNavigationWithEmpty::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::ScriptPermission::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::ScriptPermission::SHEBANG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::SelfAssignment::ASSIGNMENT_TYPE_TO_RHS_TYPE = T.let(T.unsafe(nil), Hash)

RuboCop::Cop::Lint::SelfAssignment::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::SendWithMixinArgument::MIXIN_METHODS = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Lint::SendWithMixinArgument::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::SendWithMixinArgument::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Lint::SendWithMixinArgument::SEND_METHODS = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Lint::ShadowedArgument::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::ShadowedException::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::ShadowingOuterLocalVariable::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::SharedMutableDefault::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::SharedMutableDefault::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Lint::StructNewOverride::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::StructNewOverride::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Lint::StructNewOverride::STRUCT_MEMBER_NAME_TYPES = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Lint::StructNewOverride::STRUCT_METHOD_NAMES = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Lint::SuppressedException::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::SuppressedExceptionInNumberConversion::EXPECTED_EXCEPTION_CLASSES = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Lint::SuppressedExceptionInNumberConversion::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::SymbolConversion::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::SymbolConversion::MSG_CONSISTENCY = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::SymbolConversion::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Lint::Syntax::LEVELS = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Lint::ToEnumArguments::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::ToEnumArguments::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Lint::ToJSON::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::TopLevelReturnWithArgument::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::TrailingCommaInAttributeDeclaration::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::TripleQuotes::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::UnderscorePrefixedVariableName::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::UnescapedBracketInRegexp::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::UnescapedBracketInRegexp::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Lint::UnexpectedBlockArity::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::UnifiedInteger::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::UnmodifiedReduceAccumulator::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::UnmodifiedReduceAccumulator::MSG_INDEX = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::UnreachableCode::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::UnreachableLoop::CONTINUE_KEYWORDS = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Lint::UnreachableLoop::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::UriEscapeUnescape::ALTERNATE_METHODS_OF_URI_ESCAPE = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Lint::UriEscapeUnescape::ALTERNATE_METHODS_OF_URI_UNESCAPE = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Lint::UriEscapeUnescape::METHOD_NAMES = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Lint::UriEscapeUnescape::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::UriEscapeUnescape::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Lint::UriRegexp::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::UriRegexp::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Lint::UselessAccessModifier::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::UselessAssignment::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::UselessConstantScoping::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::UselessDefined::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::UselessDefined::TYPES = T.let(T.unsafe(nil), Hash)

RuboCop::Cop::Lint::UselessElseWithoutRescue::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::UselessMethodDefinition::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::UselessNumericOperation::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::UselessNumericOperation::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Lint::UselessRescue::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::UselessRuby2Keywords::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::UselessRuby2Keywords::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Lint::UselessSetterCall::ASSIGNMENT_TYPES = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Lint::UselessSetterCall::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::UselessTimes::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::UselessTimes::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Lint::Void::BINARY_OPERATORS = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Lint::Void::CONST_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::Void::EXPRESSION_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::Void::LIT_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::Void::METHODS_REPLACEABLE_BY_EACH = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Lint::Void::NONMUTATING_METHODS = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Lint::Void::NONMUTATING_METHODS_WITH_BANG_VERSION = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Lint::Void::NONMUTATING_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::Void::OPERATORS = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Lint::Void::OP_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::Void::SELF_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Lint::Void::UNARY_OPERATORS = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Lint::Void::VAR_MSG = T.let(T.unsafe(nil), String)

module RuboCop::Cop::MethodPreference
  private

  # source://rubocop//lib/rubocop/cop/mixin/method_preference.rb#25
  def default_cop_config; end

  # source://rubocop//lib/rubocop/cop/mixin/method_preference.rb#9
  def preferred_method(method); end

  # source://rubocop//lib/rubocop/cop/mixin/method_preference.rb#13
  def preferred_methods; end
end

RuboCop::Cop::Metrics::AbcSize::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Metrics::BlockLength::LABEL = T.let(T.unsafe(nil), String)

RuboCop::Cop::Metrics::BlockNesting::NESTING_BLOCKS = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Metrics::CollectionLiteralLength::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Metrics::CollectionLiteralLength::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Metrics::CyclomaticComplexity::COUNTED_NODES = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Metrics::CyclomaticComplexity::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Metrics::MethodLength::LABEL = T.let(T.unsafe(nil), String)

RuboCop::Cop::Metrics::ParameterLists::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Metrics::ParameterLists::NAMED_KEYWORD_TYPES = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Metrics::ParameterLists::OPTIONAL_PARAMETERS_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Metrics::PerceivedComplexity::COUNTED_NODES = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Metrics::PerceivedComplexity::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Metrics::Utils::AbcSizeCalculator::BRANCH_NODES = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Metrics::Utils::AbcSizeCalculator::CONDITION_NODES = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Metrics::Utils::CodeLengthCalculator::CLASSLIKE_TYPES = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Metrics::Utils::CodeLengthCalculator::FOLDABLE_TYPES = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Metrics::Utils::IteratingBlock::KNOWN_ITERATING_METHODS = T.let(T.unsafe(nil), Set)

RuboCop::Cop::Metrics::Utils::RepeatedAttributeDiscount::VAR_SETTER_TO_GETTER = T.let(T.unsafe(nil), Hash)

RuboCop::Cop::Migration::DepartmentName::DISABLE_COMMENT_FORMAT = T.let(T.unsafe(nil), Regexp)

RuboCop::Cop::Migration::DepartmentName::DISABLING_COPS_CONTENT_TOKEN = T.let(T.unsafe(nil), Regexp)

RuboCop::Cop::Migration::DepartmentName::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::MultilineExpressionIndentation::ASSIGNMENT_MESSAGE_TAIL = T.let(T.unsafe(nil), String)

RuboCop::Cop::MultilineExpressionIndentation::DEFAULT_MESSAGE_TAIL = T.let(T.unsafe(nil), String)

RuboCop::Cop::MultilineExpressionIndentation::KEYWORD_ANCESTOR_TYPES = T.let(T.unsafe(nil), Array)

RuboCop::Cop::MultilineExpressionIndentation::KEYWORD_MESSAGE_TAIL = T.let(T.unsafe(nil), String)

RuboCop::Cop::MultilineExpressionIndentation::UNALIGNED_RHS_TYPES = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Naming::AccessorMethodName::MSG_READER = T.let(T.unsafe(nil), String)

RuboCop::Cop::Naming::AccessorMethodName::MSG_WRITER = T.let(T.unsafe(nil), String)

RuboCop::Cop::Naming::AsciiIdentifiers::CONSTANT_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Naming::AsciiIdentifiers::IDENTIFIER_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Naming::BinaryOperatorParameterName::EXCLUDED = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Naming::BinaryOperatorParameterName::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Naming::BinaryOperatorParameterName::OP_LIKE_METHODS = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Naming::BlockForwarding::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Naming::ClassAndModuleCamelCase::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Naming::ConstantName::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Naming::ConstantName::SNAKE_CASE = T.let(T.unsafe(nil), Regexp)

RuboCop::Cop::Naming::FileName::MSG_NO_DEFINITION = T.let(T.unsafe(nil), String)

RuboCop::Cop::Naming::FileName::MSG_REGEX = T.let(T.unsafe(nil), String)

RuboCop::Cop::Naming::FileName::MSG_SNAKE_CASE = T.let(T.unsafe(nil), String)

RuboCop::Cop::Naming::FileName::SNAKE_CASE = T.let(T.unsafe(nil), Regexp)

RuboCop::Cop::Naming::HeredocDelimiterCase::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Naming::HeredocDelimiterNaming::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Naming::InclusiveLanguage::EMPTY_ARRAY = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Naming::InclusiveLanguage::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Naming::InclusiveLanguage::MSG_FOR_FILE_PATH = T.let(T.unsafe(nil), String)

RuboCop::Cop::Naming::MemoizedInstanceVariableName::DYNAMIC_DEFINE_METHODS = T.let(T.unsafe(nil), Set)

RuboCop::Cop::Naming::MemoizedInstanceVariableName::INITIALIZE_METHODS = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Naming::MemoizedInstanceVariableName::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Naming::MemoizedInstanceVariableName::UNDERSCORE_REQUIRED = T.let(T.unsafe(nil), String)

RuboCop::Cop::Naming::MethodName::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Naming::MethodName::MSG_FORBIDDEN = T.let(T.unsafe(nil), String)

RuboCop::Cop::Naming::RescuedExceptionsVariableName::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Naming::VariableName::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Naming::VariableName::MSG_FORBIDDEN = T.let(T.unsafe(nil), String)

RuboCop::Cop::Naming::VariableNumber::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::NegativeConditional::MSG = T.let(T.unsafe(nil), String)

class RuboCop::Cop::Offense
  include ::Comparable

  # @api private
  # @return [Offense] a new instance of Offense
  #
  # source://rubocop//lib/rubocop/cop/offense.rb#83
  def initialize(severity, location, message, cop_name, status = T.unsafe(nil), corrector = T.unsafe(nil)); end

  # Returns `-1`, `0`, or `+1`
  # if this offense is less than, equal to, or greater than `other`.
  #
  # @api public
  # @return [Integer] comparison result
  #
  # source://rubocop//lib/rubocop/cop/offense.rb#229
  def <=>(other); end

  # @api public
  # @return [Boolean] returns `true` if two offenses contain same attributes
  #
  # source://rubocop//lib/rubocop/cop/offense.rb#210
  def ==(other); end

  # @api private
  #
  # source://rubocop//lib/rubocop/cop/offense.rb#159
  def column; end

  # @api private
  #
  # source://rubocop//lib/rubocop/cop/offense.rb#169
  def column_length; end

  # @api private
  #
  # source://rubocop//lib/rubocop/cop/offense.rb#193
  def column_range; end

  # @api public
  # @example
  #   'Layout/LineLength'
  # @return [String] the cop name as a String for which this offense is for.
  #
  # source://rubocop//lib/rubocop/cop/offense.rb#50
  def cop_name; end

  # @api public
  # @return [Boolean] whether this offense can be automatically corrected via autocorrect.
  #   This includes todo comments, for example when requested with `--disable-uncorrectable`.
  #
  # source://rubocop//lib/rubocop/cop/offense.rb#101
  def correctable?; end

  # @api public
  # @return [Boolean] whether this offense is automatically corrected via
  #   autocorrect or a todo.
  #
  # source://rubocop//lib/rubocop/cop/offense.rb#112
  def corrected?; end

  # @api public
  # @return [Boolean] whether this offense is automatically disabled via a todo.
  #
  # source://rubocop//lib/rubocop/cop/offense.rb#122
  def corrected_with_todo?; end

  # @api public
  # @return [Corrector | nil] the autocorrection for this offense, or `nil` when not available
  #
  # source://rubocop//lib/rubocop/cop/offense.rb#61
  def corrector; end

  # @api public
  # @return [Boolean] whether this offense was locally disabled with a
  #   disable or todo where it occurred.
  #
  # source://rubocop//lib/rubocop/cop/offense.rb#133
  def disabled?; end

  # @api public
  # @return [Boolean] returns `true` if two offenses contain same attributes
  #
  # source://rubocop//lib/rubocop/cop/offense.rb#210
  def eql?(other); end

  # @api private
  #
  # source://rubocop//lib/rubocop/cop/offense.rb#178
  def first_line; end

  # source://rubocop//lib/rubocop/cop/offense.rb#218
  def hash; end

  # @api public
  # @return [Parser::Source::Range] the range of the code that is highlighted
  #
  # source://rubocop//lib/rubocop/cop/offense.rb#141
  def highlighted_area; end

  # @api private
  #
  # source://rubocop//lib/rubocop/cop/offense.rb#188
  def last_column; end

  # @api private
  #
  # source://rubocop//lib/rubocop/cop/offense.rb#183
  def last_line; end

  # @api private
  #
  # source://rubocop//lib/rubocop/cop/offense.rb#154
  def line; end

  # @api public
  # @return [Parser::Source::Range] the location where the violation is detected.
  # @see https://www.rubydoc.info/gems/parser/Parser/Source/Range Parser::Source::Range
  #
  # source://rubocop//lib/rubocop/cop/offense.rb#28
  def location; end

  # @api public
  # @example
  #   'Line is too long. [90/80]'
  # @return [String] human-readable message
  #
  # source://rubocop//lib/rubocop/cop/offense.rb#39
  def message; end

  # Internally we use column number that start at 0, but when
  # outputting column numbers, we want them to start at 1. One
  # reason is that editors, such as Emacs, expect this.
  #
  # @api private
  #
  # source://rubocop//lib/rubocop/cop/offense.rb#202
  def real_column; end

  # @api public
  # @return [RuboCop::Cop::Severity]
  #
  # source://rubocop//lib/rubocop/cop/offense.rb#17
  def severity; end

  # @api private
  #
  # source://rubocop//lib/rubocop/cop/offense.rb#164
  def source_line; end

  # @api private
  #
  # source://rubocop//lib/rubocop/cop/offense.rb#53
  def status; end

  # This is just for debugging purpose.
  #
  # @api private
  #
  # source://rubocop//lib/rubocop/cop/offense.rb#147
  def to_s; end
end

RuboCop::Cop::Offense::COMPARISON_ATTRIBUTES = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Offense::NO_LOCATION = T.let(T.unsafe(nil), RuboCop::Cop::Offense::PseudoSourceRange)

class RuboCop::Cop::Offense::PseudoSourceRange < ::Struct
  # Returns the value of attribute begin_pos
  #
  # @return [Object] the current value of begin_pos
  def begin_pos; end

  # Sets the attribute begin_pos
  #
  # @param value [Object] the value to set the attribute begin_pos to.
  # @return [Object] the newly set value
  def begin_pos=(_); end

  # Returns the value of attribute column
  #
  # @return [Object] the current value of column
  def column; end

  # Sets the attribute column
  #
  # @param value [Object] the value to set the attribute column to.
  # @return [Object] the newly set value
  def column=(_); end

  # source://rubocop//lib/rubocop/cop/offense.rb#69
  def column_range; end

  # Returns the value of attribute end_pos
  #
  # @return [Object] the current value of end_pos
  def end_pos; end

  # Sets the attribute end_pos
  #
  # @param value [Object] the value to set the attribute end_pos to.
  # @return [Object] the newly set value
  def end_pos=(_); end

  # Returns the value of attribute line
  #
  # @return [Object] the current value of line
  def first_line; end

  # Returns the value of attribute column
  #
  # @return [Object] the current value of column
  def last_column; end

  # Returns the value of attribute line
  #
  # @return [Object] the current value of line
  def last_line; end

  # source://rubocop//lib/rubocop/cop/offense.rb#73
  def length; end

  # Returns the value of attribute line
  #
  # @return [Object] the current value of line
  def line; end

  # Sets the attribute line
  #
  # @param value [Object] the value to set the attribute line to.
  # @return [Object] the newly set value
  def line=(_); end

  # source://rubocop//lib/rubocop/cop/offense.rb#73
  def size; end

  # Returns the value of attribute source_line
  #
  # @return [Object] the current value of source_line
  def source_line; end

  # Sets the attribute source_line
  #
  # @param value [Object] the value to set the attribute source_line to.
  # @return [Object] the newly set value
  def source_line=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

RuboCop::Cop::PrecedingFollowingAlignment::ASSIGNMENT_OR_COMPARISON_TOKENS = T.let(T.unsafe(nil), Array)

RuboCop::Cop::PreferredDelimiters::PERCENT_LITERAL_TYPES = T.let(T.unsafe(nil), Array)

module RuboCop::Cop::RangeHelp
  private

  # source://rubocop//lib/rubocop/cop/mixin/range_help.rb#152
  def add_range(range1, range2); end

  # A range containing the first to the last argument
  # of a method call or method definition.
  # def foo(a, b:)
  #         ^^^^^
  # bar(1, 2, 3, &blk)
  #     ^^^^^^^^^^^^^
  # baz { |x, y:, z:| }
  #        ^^^^^^^^^
  #
  # source://rubocop//lib/rubocop/cop/mixin/range_help.rb#45
  def arguments_range(node); end

  # source://rubocop//lib/rubocop/cop/mixin/range_help.rb#93
  def column_offset_between(base_range, range); end

  # A range containing only the contents of a literal with delimiters (e.g. in
  # `%i{1 2 3}` this will be the range covering `1 2 3` only).
  #
  # source://rubocop//lib/rubocop/cop/mixin/range_help.rb#33
  def contents_range(node); end

  # source://rubocop//lib/rubocop/cop/mixin/range_help.rb#111
  def directions(side); end

  # Returns the column attribute of the range, except if the range is on
  # the first line and there's a byte order mark at the beginning of that
  # line, in which case 1 is subtracted from the column value. This gives
  # the column as it appears when viewing the file in an editor.
  #
  # source://rubocop//lib/rubocop/cop/mixin/range_help.rb#103
  def effective_column(range); end

  # source://rubocop//lib/rubocop/cop/mixin/range_help.rb#120
  def final_pos(src, pos, increment, continuations, newlines, whitespace); end

  # source://rubocop//lib/rubocop/cop/mixin/range_help.rb#128
  def move_pos(src, pos, step, condition, regexp); end

  # source://rubocop//lib/rubocop/cop/mixin/range_help.rb#134
  def move_pos_str(src, pos, step, condition, needle); end

  # source://rubocop//lib/rubocop/cop/mixin/range_help.rb#49
  def range_between(start_pos, end_pos); end

  # source://rubocop//lib/rubocop/cop/mixin/range_help.rb#84
  def range_by_whole_lines(range, include_final_newline: T.unsafe(nil), buffer: T.unsafe(nil)); end

  # source://rubocop//lib/rubocop/cop/mixin/range_help.rb#145
  def range_with_comments(node); end

  # source://rubocop//lib/rubocop/cop/mixin/range_help.rb#141
  def range_with_comments_and_lines(node); end

  # source://rubocop//lib/rubocop/cop/mixin/range_help.rb#53
  def range_with_surrounding_comma(range, side = T.unsafe(nil)); end

  # source://rubocop//lib/rubocop/cop/mixin/range_help.rb#67
  def range_with_surrounding_space(range_positional = T.unsafe(nil), range: T.unsafe(nil), side: T.unsafe(nil), newlines: T.unsafe(nil), whitespace: T.unsafe(nil), continuations: T.unsafe(nil), buffer: T.unsafe(nil)); end

  # source://rubocop//lib/rubocop/cop/mixin/range_help.rb#12
  def source_range(source_buffer, line_number, column, length = T.unsafe(nil)); end
end

RuboCop::Cop::RangeHelp::BYTE_ORDER_MARK = T.let(T.unsafe(nil), Integer)

module RuboCop::Cop::RangeHelp::NOT_GIVEN; end

class RuboCop::Cop::Registry
  include ::Enumerable

  # @return [Registry] a new instance of Registry
  #
  # source://rubocop//lib/rubocop/cop/registry.rb#51
  def initialize(cops = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://rubocop//lib/rubocop/cop/registry.rb#232
  def ==(other); end

  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/cop/registry.rb#97
  def contains_cop_matching?(names); end

  # source://rubocop//lib/rubocop/cop/registry.rb#179
  def cops; end

  # source://rubocop//lib/rubocop/cop/registry.rb#224
  def cops_for_department(department); end

  # @return [Boolean] Checks if given name is department
  #
  # source://rubocop//lib/rubocop/cop/registry.rb#93
  def department?(name); end

  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/cop/registry.rb#147
  def department_missing?(badge, name); end

  # @return [Array<Symbol>] list of departments for current cops.
  #
  # source://rubocop//lib/rubocop/cop/registry.rb#72
  def departments; end

  # source://rubocop//lib/rubocop/cop/registry.rb#193
  def disabled(config); end

  # source://rubocop//lib/rubocop/cop/registry.rb#67
  def dismiss(cop); end

  # source://rubocop//lib/rubocop/cop/registry.rb#247
  def each(&block); end

  # source://rubocop//lib/rubocop/cop/registry.rb#189
  def enabled(config); end

  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/cop/registry.rb#197
  def enabled?(cop, config); end

  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/cop/registry.rb#213
  def enabled_pending_cop?(cop_cfg, config); end

  # source://rubocop//lib/rubocop/cop/registry.rb#63
  def enlist(cop); end

  # @param cop_name [String]
  # @return [Class, nil]
  #
  # source://rubocop//lib/rubocop/cop/registry.rb#253
  def find_by_cop_name(cop_name); end

  # When a cop name is given returns a single-element array with the cop class.
  # When a department name is given returns an array with all the cop classes
  # for that department.
  #
  # source://rubocop//lib/rubocop/cop/registry.rb#260
  def find_cops_by_directive(directive); end

  # source://rubocop//lib/rubocop/cop/registry.rb#265
  def freeze; end

  # source://rubocop//lib/rubocop/cop/registry.rb#184
  def length; end

  # source://rubocop//lib/rubocop/cop/registry.rb#220
  def names; end

  # source://rubocop//lib/rubocop/cop/registry.rb#228
  def names_for_department(department); end

  # Returns the value of attribute options.
  #
  # source://rubocop//lib/rubocop/cop/registry.rb#49
  def options; end

  # source://rubocop//lib/rubocop/cop/registry.rb#151
  def print_warning(name, path); end

  # Convert a user provided cop name into a properly namespaced name
  #
  # @example gives back a correctly qualified cop name
  #
  #   registry = RuboCop::Cop::Registry
  #   registry.qualified_cop_name('Layout/EndOfLine', '') # => 'Layout/EndOfLine'
  # @example fixes incorrect namespaces
  #
  #   registry = RuboCop::Cop::Registry
  #   registry.qualified_cop_name('Lint/EndOfLine', '') # => 'Layout/EndOfLine'
  # @example namespaces bare cop identifiers
  #
  #   registry = RuboCop::Cop::Registry
  #   registry.qualified_cop_name('EndOfLine', '') # => 'Layout/EndOfLine'
  # @example passes back unrecognized cop names
  #
  #   registry = RuboCop::Cop::Registry
  #   registry.qualified_cop_name('NotACop', '') # => 'NotACop'
  # @note Emits a warning if the provided name has an incorrect namespace
  # @param name [String] Cop name extracted from config
  # @param path [String, nil] Path of file that `name` was extracted from
  # @param warn [Boolean] Print a warning if no department given for `name`
  # @raise [AmbiguousCopName] if a bare identifier with two possible namespaces is provided
  # @return [String] Qualified cop name
  #
  # source://rubocop//lib/rubocop/cop/registry.rb#133
  def qualified_cop_name(name, path, warn: T.unsafe(nil)); end

  # source://rubocop//lib/rubocop/cop/registry.rb#166
  def qualify_badge(badge); end

  # source://rubocop//lib/rubocop/cop/registry.rb#243
  def select(&block); end

  # source://rubocop//lib/rubocop/cop/registry.rb#236
  def sort!; end

  # @return [Hash{String => Array<Class>}]
  #
  # source://rubocop//lib/rubocop/cop/registry.rb#174
  def to_h; end

  # source://rubocop//lib/rubocop/cop/registry.rb#159
  def unqualified_cop_names; end

  # @return [Registry] Cops for that specific department.
  #
  # source://rubocop//lib/rubocop/cop/registry.rb#78
  def with_department(department); end

  # @return [Registry] Cops not for a specific department.
  #
  # source://rubocop//lib/rubocop/cop/registry.rb#84
  def without_department(department); end

  private

  # source://rubocop//lib/rubocop/cop/registry.rb#283
  def clear_enrollment_queue; end

  # source://rubocop//lib/rubocop/cop/registry.rb#279
  def initialize_copy(reg); end

  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/cop/registry.rb#312
  def registered?(badge); end

  # source://rubocop//lib/rubocop/cop/registry.rb#299
  def resolve_badge(given_badge, real_badge, source_path, warn: T.unsafe(nil)); end

  # source://rubocop//lib/rubocop/cop/registry.rb#295
  def with(cops); end

  class << self
    # source://rubocop//lib/rubocop/cop/registry.rb#22
    def all; end

    # Returns the value of attribute global.
    #
    # source://rubocop//lib/rubocop/cop/registry.rb#274
    def global; end

    # @return [Boolean]
    #
    # source://rubocop//lib/rubocop/cop/registry.rb#44
    def qualified_cop?(name); end

    # source://rubocop//lib/rubocop/cop/registry.rb#26
    def qualified_cop_name(name, origin, warn: T.unsafe(nil)); end

    # source://rubocop//lib/rubocop/cop/registry.rb#40
    def reset!; end

    # Changes momentarily the global registry
    # Intended for testing purposes
    #
    # source://rubocop//lib/rubocop/cop/registry.rb#32
    def with_temporary_global(temp_global = T.unsafe(nil)); end
  end
end

RuboCop::Cop::RequireLibrary::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Security::CompoundHash::COMBINATOR_IN_HASH_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Security::CompoundHash::MONUPLE_HASH_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Security::CompoundHash::REDUNDANT_HASH_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Security::CompoundHash::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Security::Eval::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Security::Eval::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Security::IoMethods::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Security::IoMethods::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Security::JSONLoad::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Security::JSONLoad::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Security::MarshalLoad::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Security::MarshalLoad::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Security::Open::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Security::Open::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Security::YAMLLoad::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Security::YAMLLoad::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Severity::CODE_TABLE = T.let(T.unsafe(nil), Hash)

RuboCop::Cop::Severity::NAMES = T.let(T.unsafe(nil), Array)

RuboCop::Cop::SpaceAfterPunctuation::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::SpaceBeforePunctuation::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::AccessModifierDeclarations::GROUP_STYLE_MESSAGE = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::AccessModifierDeclarations::INLINE_STYLE_MESSAGE = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::AccessModifierDeclarations::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::AccessorGrouping::GROUPED_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::AccessorGrouping::SEPARATED_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::Alias::MSG_ALIAS = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::Alias::MSG_ALIAS_METHOD = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::Alias::MSG_SYMBOL_ARGS = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::Alias::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::AmbiguousEndlessMethodDefinition::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::AndOr::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::ArgumentsForwarding::ADDITIONAL_ARG_TYPES = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::ArgumentsForwarding::ARGS_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::ArgumentsForwarding::BLOCK_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::ArgumentsForwarding::FORWARDING_LVAR_TYPES = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::ArgumentsForwarding::FORWARDING_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::ArgumentsForwarding::KWARGS_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::ArrayCoercion::CHECK_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::ArrayCoercion::SPLAT_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::ArrayFirstLast::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::ArrayFirstLast::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::ArrayIntersect::ACTIVE_SUPPORT_PREDICATES = T.let(T.unsafe(nil), Set)

RuboCop::Cop::Style::ArrayIntersect::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::ArrayIntersect::NEGATED_METHODS = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::ArrayIntersect::PREDICATES = T.let(T.unsafe(nil), Set)

RuboCop::Cop::Style::ArrayIntersect::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::ArrayIntersect::STRAIGHT_METHODS = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::ArrayJoin::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::ArrayJoin::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::AsciiComments::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::Attr::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::Attr::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::AutoResourceCleanup::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::AutoResourceCleanup::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::BarePercentLiterals::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::BeginBlock::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::BisectedAttrAccessor::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::BitwisePredicate::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::BitwisePredicate::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::BlockComments::BEGIN_LENGTH = T.let(T.unsafe(nil), Integer)

RuboCop::Cop::Style::BlockComments::END_LENGTH = T.let(T.unsafe(nil), Integer)

RuboCop::Cop::Style::BlockComments::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::BlockDelimiters::ALWAYS_BRACES_MESSAGE = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::BlockDelimiters::BRACES_REQUIRED_MESSAGE = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::CaseEquality::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::CaseEquality::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::CaseLikeIf::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::CharacterLiteral::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::ClassAndModuleChildren::COMPACT_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::ClassAndModuleChildren::NESTED_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::ClassCheck::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::ClassCheck::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::ClassEqualityComparison::CLASS_NAME_METHODS = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::ClassEqualityComparison::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::ClassEqualityComparison::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::ClassMethods::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::ClassMethodsDefinitions::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::ClassMethodsDefinitions::MSG_SCLASS = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::ClassVars::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::ClassVars::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::CollectionCompact::FILTER_METHODS = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::CollectionCompact::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::CollectionCompact::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::CollectionCompact::TO_ENUM_METHODS = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::CollectionMethods::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::ColonMethodCall::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::ColonMethodDefinition::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::CombinableDefined::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::CombinableDefined::OPERATORS = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::CombinableLoops::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::CommandLiteral::MSG_USE_BACKTICKS = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::CommandLiteral::MSG_USE_PERCENT_X = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::CommentAnnotation::MISSING_NOTE = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::CommentAnnotation::MSG_COLON_STYLE = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::CommentAnnotation::MSG_SPACE_STYLE = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::CommentedKeyword::ALLOWED_COMMENTS = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::CommentedKeyword::ALLOWED_COMMENT_REGEXES = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::CommentedKeyword::KEYWORDS = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::CommentedKeyword::KEYWORD_REGEXES = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::CommentedKeyword::METHOD_OR_END_DEFINITIONS = T.let(T.unsafe(nil), Regexp)

RuboCop::Cop::Style::CommentedKeyword::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::CommentedKeyword::REGEXP = T.let(T.unsafe(nil), Regexp)

RuboCop::Cop::Style::CommentedKeyword::STEEP_REGEXP = T.let(T.unsafe(nil), Regexp)

RuboCop::Cop::Style::CommentedKeyword::SUBCLASS_DEFINITION = T.let(T.unsafe(nil), Regexp)

RuboCop::Cop::Style::ComparableBetween::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::ComparableClamp::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::ComparableClamp::MSG_MIN_MAX = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::ComparableClamp::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::ConcatArrayLiterals::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::ConcatArrayLiterals::MSG_FOR_PERCENT_LITERALS = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::ConcatArrayLiterals::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::ConditionalAssignment::ASSIGNMENT_TYPES = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::ConditionalAssignment::ASSIGN_TO_CONDITION_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::ConditionalAssignment::ENABLED = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::ConditionalAssignment::LINE_LENGTH = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::ConditionalAssignment::MAX = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::ConditionalAssignment::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::ConditionalAssignment::SINGLE_LINE_CONDITIONS_ONLY = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::ConditionalAssignment::VARIABLE_ASSIGNMENT_TYPES = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::ConditionalAssignmentHelper::ALIGN_WITH = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::ConditionalAssignmentHelper::END_ALIGNMENT = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::ConditionalAssignmentHelper::EQUAL = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::ConditionalAssignmentHelper::KEYWORD = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::ConstantVisibility::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::Copyright::AUTOCORRECT_EMPTY_WARNING = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::Copyright::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::DataInheritance::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::DateTime::CLASS_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::DateTime::COERCION_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::DefWithParentheses::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::DigChain::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::DigChain::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::Dir::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::Dir::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::DirEmpty::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::DirEmpty::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::DisableCopsWithinSourceCodeDirective::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::DisableCopsWithinSourceCodeDirective::MSG_FOR_COPS = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::DocumentDynamicEvalDefinition::BLOCK_COMMENT_REGEXP = T.let(T.unsafe(nil), Regexp)

RuboCop::Cop::Style::DocumentDynamicEvalDefinition::COMMENT_REGEXP = T.let(T.unsafe(nil), Regexp)

RuboCop::Cop::Style::DocumentDynamicEvalDefinition::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::DocumentDynamicEvalDefinition::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::Documentation::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::DocumentationMethod::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::DoubleCopDisableDirective::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::DoubleNegation::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::DoubleNegation::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::EachForSimpleLoop::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::EachWithObject::METHODS = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::EachWithObject::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::EmptyBlockParameter::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::EmptyCaseCondition::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::EmptyCaseCondition::NOT_SUPPORTED_PARENT_TYPES = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::EmptyElse::EMPTY_STYLES = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::EmptyElse::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::EmptyElse::NIL_STYLES = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::EmptyHeredoc::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::EmptyLambdaParameter::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::EmptyLiteral::ARR_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::EmptyLiteral::HASH_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::EmptyLiteral::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::EmptyLiteral::STR_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::EmptyMethod::MSG_COMPACT = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::EmptyMethod::MSG_EXPANDED = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::Encoding::ENCODING_PATTERN = T.let(T.unsafe(nil), Regexp)

RuboCop::Cop::Style::Encoding::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::Encoding::SHEBANG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::EndBlock::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::EndlessMethod::CORRECTION_STYLES = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::EndlessMethod::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::EndlessMethod::MSG_MULTI_LINE = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::EndlessMethod::MSG_REQUIRE_ALWAYS = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::EndlessMethod::MSG_REQUIRE_SINGLE = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::EnvHome::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::EnvHome::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::EvalWithLocation::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::EvalWithLocation::MSG_EVAL = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::EvalWithLocation::MSG_INCORRECT_FILE = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::EvalWithLocation::MSG_INCORRECT_LINE = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::EvalWithLocation::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::EvenOdd::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::EvenOdd::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::ExactRegexpMatch::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::ExactRegexpMatch::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::ExpandPathArguments::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::ExpandPathArguments::PATHNAME_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::ExpandPathArguments::PATHNAME_NEW_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::ExpandPathArguments::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::ExplicitBlockArgument::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::ExponentialNotation::MESSAGES = T.let(T.unsafe(nil), Hash)

RuboCop::Cop::Style::FetchEnvVar::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::FetchEnvVar::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::FileEmpty::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::FileEmpty::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::FileNull::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::FileNull::REGEXP = T.let(T.unsafe(nil), Regexp)

RuboCop::Cop::Style::FileRead::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::FileRead::READ_FILE_START_TO_FINISH_MODES = T.let(T.unsafe(nil), Set)

RuboCop::Cop::Style::FileRead::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::FileTouch::APPEND_FILE_MODES = T.let(T.unsafe(nil), Set)

RuboCop::Cop::Style::FileTouch::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::FileTouch::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::FileWrite::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::FileWrite::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Set)

RuboCop::Cop::Style::FileWrite::TRUNCATING_WRITE_MODES = T.let(T.unsafe(nil), Set)

RuboCop::Cop::Style::FloatDivision::MESSAGES = T.let(T.unsafe(nil), Hash)

RuboCop::Cop::Style::FloatDivision::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::For::EACH_LENGTH = T.let(T.unsafe(nil), Integer)

RuboCop::Cop::Style::For::PREFER_EACH = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::For::PREFER_FOR = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::FormatString::AUTOCORRECTABLE_METHODS = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::FormatString::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::FormatString::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::FrozenStringLiteralComment::MSG_DISABLED = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::FrozenStringLiteralComment::MSG_MISSING = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::FrozenStringLiteralComment::MSG_MISSING_TRUE = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::FrozenStringLiteralComment::MSG_UNNECESSARY = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::FrozenStringLiteralComment::SHEBANG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::GlobalStdStream::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::GlobalStdStream::STD_STREAMS = T.let(T.unsafe(nil), Set)

RuboCop::Cop::Style::GlobalVars::BUILT_IN_VARS = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::GlobalVars::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::GuardClause::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::HashConversion::MSG_LITERAL_HASH_ARG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::HashConversion::MSG_LITERAL_MULTI_ARG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::HashConversion::MSG_SPLAT = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::HashConversion::MSG_TO_H = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::HashConversion::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::HashEachMethods::ARRAY_CONVERTER_METHODS = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::HashEachMethods::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::HashEachMethods::UNUSED_BLOCK_ARG_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::HashFetchChain::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::HashFetchChain::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::HashLikeCase::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::HashSyntax::MSG_19 = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::HashSyntax::MSG_HASH_ROCKETS = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::HashSyntax::MSG_NO_MIXED_KEYS = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::HashSyntax::NO_MIXED_KEYS_STYLES = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::IdenticalConditionalBranches::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::IfInsideElse::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::IfUnlessModifier::MSG_USE_MODIFIER = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::IfUnlessModifier::MSG_USE_NORMAL = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::IfUnlessModifierOfIfUnless::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::IfWithBooleanLiteralBranches::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::IfWithBooleanLiteralBranches::MSG_FOR_ELSIF = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::IfWithSemicolon::MSG_IF_ELSE = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::IfWithSemicolon::MSG_NEWLINE = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::IfWithSemicolon::MSG_TERNARY = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::ImplicitRuntimeError::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::ImplicitRuntimeError::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::InPatternThen::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::InfiniteLoop::LEADING_SPACE = T.let(T.unsafe(nil), Regexp)

RuboCop::Cop::Style::InfiniteLoop::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::InlineComment::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::InverseMethods::CAMEL_CASE = T.let(T.unsafe(nil), Regexp)

RuboCop::Cop::Style::InverseMethods::CLASS_COMPARISON_METHODS = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::InverseMethods::EQUALITY_METHODS = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::InverseMethods::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::InverseMethods::NEGATED_EQUALITY_METHODS = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::InverseMethods::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::InverseMethods::SAFE_NAVIGATION_INCOMPATIBLE_METHODS = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::InvertibleUnlessCondition::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::IpAddresses::IPV6_MAX_SIZE = T.let(T.unsafe(nil), Integer)

RuboCop::Cop::Style::IpAddresses::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::ItAssignment::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::ItBlockParameter::MSG_AVOID_IT_BLOCK_PARAMETER = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::ItBlockParameter::MSG_USE_IT_BLOCK_PARAMETER = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::KeywordArgumentsMerging::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::KeywordParametersOrder::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::Lambda::LITERAL_MESSAGE = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::Lambda::METHOD_MESSAGE = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::Lambda::OFFENDING_SELECTORS = T.let(T.unsafe(nil), Hash)

RuboCop::Cop::Style::LambdaCall::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::LambdaCall::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::LineEndConcatenation::COMPLEX_STRING_BEGIN_TOKEN = T.let(T.unsafe(nil), Symbol)

RuboCop::Cop::Style::LineEndConcatenation::COMPLEX_STRING_END_TOKEN = T.let(T.unsafe(nil), Symbol)

RuboCop::Cop::Style::LineEndConcatenation::CONCAT_TOKEN_TYPES = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::LineEndConcatenation::HIGH_PRECEDENCE_OP_TOKEN_TYPES = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::LineEndConcatenation::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::LineEndConcatenation::QUOTE_DELIMITERS = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::LineEndConcatenation::SIMPLE_STRING_TOKEN_TYPE = T.let(T.unsafe(nil), Symbol)

RuboCop::Cop::Style::MagicCommentFormat::CommentRange::DIRECTIVE_REGEXP = T.let(T.unsafe(nil), Regexp)

RuboCop::Cop::Style::MagicCommentFormat::CommentRange::VALUE_REGEXP = T.let(T.unsafe(nil), Regexp)

RuboCop::Cop::Style::MagicCommentFormat::KEBAB_SEPARATOR = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::MagicCommentFormat::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::MagicCommentFormat::MSG_VALUE = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::MagicCommentFormat::SNAKE_SEPARATOR = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::MapCompactWithConditionalBlock::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::MapCompactWithConditionalBlock::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::MapIntoArray::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::MapToHash::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::MapToHash::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::MapToSet::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::MapToSet::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::MethodCallWithArgsParentheses::OmitParentheses::OMIT_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::MethodCallWithArgsParentheses::OmitParentheses::TRAILING_WHITESPACE_REGEX = T.let(T.unsafe(nil), Regexp)

RuboCop::Cop::Style::MethodCallWithArgsParentheses::RequireParentheses::REQUIRE_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::MethodCallWithoutArgsParentheses::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::MethodCalledOnDoEndBlock::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::MethodDefParentheses::MSG_MISSING = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::MethodDefParentheses::MSG_PRESENT = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::MinMax::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::MinMaxComparison::COMPARISON_OPERATORS = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::MinMaxComparison::GRATER_OPERATORS = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::MinMaxComparison::LESS_OPERATORS = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::MinMaxComparison::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::MissingElse::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::MissingElse::MSG_EMPTY = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::MissingElse::MSG_NIL = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::MissingRespondToMissing::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::MixinGrouping::MIXIN_METHODS = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::MixinGrouping::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::MixinUsage::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::MixinUsage::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::ModuleFunction::EXTEND_SELF_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::ModuleFunction::FORBIDDEN_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::ModuleFunction::MODULE_FUNCTION_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::MultilineBlockChain::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::MultilineIfModifier::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::MultilineIfThen::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::MultilineIfThen::NON_MODIFIER_THEN = T.let(T.unsafe(nil), Regexp)

RuboCop::Cop::Style::MultilineInPatternThen::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::MultilineMemoization::BRACES_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::MultilineMemoization::KEYWORD_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::MultilineMethodSignature::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::MultilineTernaryOperator::MSG_IF = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::MultilineTernaryOperator::MSG_SINGLE_LINE = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::MultilineTernaryOperator::SINGLE_LINE_TYPES = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::MultilineWhenThen::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::MultipleComparison::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::MutableConstant::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::NegatedIfElseCondition::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::NegatedIfElseCondition::NEGATED_EQUALITY_METHODS = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::NestedFileDirname::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::NestedFileDirname::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::NestedModifier::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::NestedParenthesizedCalls::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::NestedTernaryOperator::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::Next::EXIT_TYPES = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::Next::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::NilComparison::EXPLICIT_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::NilComparison::PREDICATE_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::NilComparison::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::NilLambda::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::NonNilCheck::MSG_FOR_REDUNDANCY = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::NonNilCheck::MSG_FOR_REPLACEMENT = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::NonNilCheck::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::Not::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::Not::OPPOSITE_METHODS = T.let(T.unsafe(nil), Hash)

RuboCop::Cop::Style::Not::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::NumberedParameters::MSG_DISALLOW = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::NumberedParameters::MSG_MULTI_LINE = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::NumberedParametersLimit::DEFAULT_MAX_VALUE = T.let(T.unsafe(nil), Integer)

RuboCop::Cop::Style::NumberedParametersLimit::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::NumberedParametersLimit::NUMBERED_PARAMETER_PATTERN = T.let(T.unsafe(nil), Regexp)

RuboCop::Cop::Style::NumericLiteralPrefix::BINARY_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::NumericLiteralPrefix::BINARY_REGEX = T.let(T.unsafe(nil), Regexp)

RuboCop::Cop::Style::NumericLiteralPrefix::DECIMAL_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::NumericLiteralPrefix::DECIMAL_REGEX = T.let(T.unsafe(nil), Regexp)

RuboCop::Cop::Style::NumericLiteralPrefix::HEX_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::NumericLiteralPrefix::HEX_REGEX = T.let(T.unsafe(nil), Regexp)

RuboCop::Cop::Style::NumericLiteralPrefix::OCTAL_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::NumericLiteralPrefix::OCTAL_REGEX = T.let(T.unsafe(nil), Regexp)

RuboCop::Cop::Style::NumericLiteralPrefix::OCTAL_ZERO_ONLY_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::NumericLiteralPrefix::OCTAL_ZERO_ONLY_REGEX = T.let(T.unsafe(nil), Regexp)

RuboCop::Cop::Style::NumericLiterals::DELIMITER_REGEXP = T.let(T.unsafe(nil), Regexp)

RuboCop::Cop::Style::NumericLiterals::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::NumericPredicate::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::NumericPredicate::REPLACEMENTS = T.let(T.unsafe(nil), Hash)

RuboCop::Cop::Style::NumericPredicate::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::ObjectThen::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::ObjectThen::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::OneLineConditional::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::OpenStructUse::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::OperatorMethodCall::INVALID_SYNTAX_ARG_TYPES = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::OperatorMethodCall::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::OperatorMethodCall::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::OptionHash::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::OptionalArguments::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::OptionalBooleanParameter::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::OrAssignment::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::ParallelAssignment::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::PercentQLiterals::LOWER_CASE_Q_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::PercentQLiterals::UPPER_CASE_Q_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::PerlBackrefs::MESSAGE_FORMAT = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::PreferredHashMethods::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::PreferredHashMethods::OFFENDING_SELECTORS = T.let(T.unsafe(nil), Hash)

RuboCop::Cop::Style::PreferredHashMethods::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::Proc::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::QuotedSymbols::MSG_DOUBLE = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::QuotedSymbols::MSG_SINGLE = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::RaiseArgs::ACCEPTABLE_ARG_TYPES = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::RaiseArgs::COMPACT_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::RaiseArgs::EXPLODED_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::RaiseArgs::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::RandomWithOffset::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::RandomWithOffset::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::RedundantArgument::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::RedundantArgument::NO_RECEIVER_METHODS = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::RedundantArrayConstructor::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::RedundantArrayConstructor::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::RedundantAssignment::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::RedundantBegin::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::RedundantCapitalW::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::RedundantCondition::ARGUMENT_WITH_OPERATOR_TYPES = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::RedundantCondition::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::RedundantCondition::REDUNDANT_CONDITION = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::RedundantConditional::COMPARISON_OPERATOR_MATCHER = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::RedundantConditional::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::RedundantConstantBase::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::RedundantCurrentDirectoryInPath::CURRENT_DIRECTORY_PREFIX = T.let(T.unsafe(nil), Regexp)

RuboCop::Cop::Style::RedundantCurrentDirectoryInPath::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::RedundantCurrentDirectoryInPath::REDUNDANT_CURRENT_DIRECTORY_PREFIX = T.let(T.unsafe(nil), Regexp)

RuboCop::Cop::Style::RedundantCurrentDirectoryInPath::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::RedundantDoubleSplatHashBraces::MERGE_METHODS = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::RedundantDoubleSplatHashBraces::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::RedundantEach::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::RedundantEach::MSG_WITH_INDEX = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::RedundantEach::MSG_WITH_OBJECT = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::RedundantEach::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::RedundantException::MSG_1 = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::RedundantException::MSG_2 = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::RedundantException::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::RedundantFetchBlock::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::RedundantFileExtensionInRequire::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::RedundantFileExtensionInRequire::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::RedundantFilterChain::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::RedundantFilterChain::RAILS_METHODS = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::RedundantFilterChain::REPLACEMENT_METHODS = T.let(T.unsafe(nil), Hash)

RuboCop::Cop::Style::RedundantFilterChain::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::RedundantFormat::ACCEPTABLE_LITERAL_TYPES = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::RedundantFormat::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::RedundantFormat::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Set)

RuboCop::Cop::Style::RedundantFreeze::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::RedundantFreeze::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::RedundantHeredocDelimiterQuotes::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::RedundantHeredocDelimiterQuotes::STRING_INTERPOLATION_OR_ESCAPED_CHARACTER_PATTERN = T.let(T.unsafe(nil), Regexp)

RuboCop::Cop::Style::RedundantInitialize::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::RedundantInitialize::MSG_EMPTY = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::RedundantInterpolation::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::RedundantInterpolationUnfreeze::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::RedundantInterpolationUnfreeze::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::RedundantLineContinuation::ALLOWED_STRING_TOKENS = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::RedundantLineContinuation::ARGUMENT_TAKING_FLOW_TOKEN_TYPES = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::RedundantLineContinuation::ARGUMENT_TYPES = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::RedundantLineContinuation::ARITHMETIC_OPERATOR_TOKENS = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::RedundantLineContinuation::LINE_CONTINUATION = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::RedundantLineContinuation::LINE_CONTINUATION_PATTERN = T.let(T.unsafe(nil), Regexp)

RuboCop::Cop::Style::RedundantLineContinuation::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::RedundantParentheses::ALLOWED_NODE_TYPES = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::RedundantPercentQ::DYNAMIC_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::RedundantPercentQ::EMPTY = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::RedundantPercentQ::ESCAPED_NON_BACKSLASH = T.let(T.unsafe(nil), Regexp)

RuboCop::Cop::Style::RedundantPercentQ::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::RedundantPercentQ::PERCENT_CAPITAL_Q = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::RedundantPercentQ::PERCENT_Q = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::RedundantPercentQ::QUOTE = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::RedundantPercentQ::SINGLE_QUOTE = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::RedundantPercentQ::STRING_INTERPOLATION_REGEXP = T.let(T.unsafe(nil), Regexp)

RuboCop::Cop::Style::RedundantRegexpArgument::DETERMINISTIC_REGEX = T.let(T.unsafe(nil), Regexp)

RuboCop::Cop::Style::RedundantRegexpArgument::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::RedundantRegexpArgument::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::RedundantRegexpArgument::STR_SPECIAL_CHARS = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::RedundantRegexpCharacterClass::MSG_REDUNDANT_CHARACTER_CLASS = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::RedundantRegexpCharacterClass::REQUIRES_ESCAPE_OUTSIDE_CHAR_CLASS_CHARS = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::RedundantRegexpConstructor::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::RedundantRegexpConstructor::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::RedundantRegexpEscape::ALLOWED_ALWAYS_ESCAPES = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::RedundantRegexpEscape::ALLOWED_OUTSIDE_CHAR_CLASS_METACHAR_ESCAPES = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::RedundantRegexpEscape::ALLOWED_WITHIN_CHAR_CLASS_METACHAR_ESCAPES = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::RedundantRegexpEscape::MSG_REDUNDANT_ESCAPE = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::RedundantReturn::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::RedundantReturn::MULTI_RETURN_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::RedundantReturn::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::RedundantSelf::KERNEL_METHODS = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::RedundantSelf::KEYWORDS = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::RedundantSelf::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::RedundantSelfAssignment::ASSIGNMENT_TYPE_TO_RECEIVER_TYPE = T.let(T.unsafe(nil), Hash)

RuboCop::Cop::Style::RedundantSelfAssignment::METHODS_RETURNING_SELF = T.let(T.unsafe(nil), Set)

RuboCop::Cop::Style::RedundantSelfAssignment::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::RedundantSelfAssignmentBranch::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::RedundantSort::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::RedundantSort::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::RedundantSortBy::MSG_BLOCK = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::RedundantSortBy::MSG_ITBLOCK = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::RedundantSortBy::MSG_NUMBLOCK = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::RedundantStringEscape::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::RegexpLiteral::MSG_USE_PERCENT_R = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::RegexpLiteral::MSG_USE_SLASHES = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::RequireOrder::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::RequireOrder::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::RescueModifier::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::RescueStandardError::MSG_EXPLICIT = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::RescueStandardError::MSG_IMPLICIT = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::ReturnNil::RETURN_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::ReturnNil::RETURN_NIL_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::ReturnNilInPredicateMethodDefinition::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::SafeNavigation::LOGIC_JUMP_KEYWORDS = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::SafeNavigation::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::SafeNavigationChainLength::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::Sample::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::Sample::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::SelectByRegexp::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::SelectByRegexp::OPPOSITE_REPLACEMENTS = T.let(T.unsafe(nil), Hash)

RuboCop::Cop::Style::SelectByRegexp::REGEXP_METHODS = T.let(T.unsafe(nil), Set)

RuboCop::Cop::Style::SelectByRegexp::REPLACEMENTS = T.let(T.unsafe(nil), Hash)

RuboCop::Cop::Style::SelectByRegexp::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::SelfAssignment::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::SelfAssignment::OPS = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::Semicolon::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::Send::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::Send::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::SendWithLiteralMethodName::METHOD_NAME_PATTERN = T.let(T.unsafe(nil), Regexp)

RuboCop::Cop::Style::SendWithLiteralMethodName::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::SendWithLiteralMethodName::RESERVED_WORDS = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::SendWithLiteralMethodName::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::SendWithLiteralMethodName::STATIC_METHOD_NAME_NODE_TYPES = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::SignalException::FAIL_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::SignalException::RAISE_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::SignalException::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::SingleArgumentDig::IGNORED_ARGUMENT_TYPES = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::SingleArgumentDig::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::SingleArgumentDig::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::SingleLineBlockParams::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::SingleLineDoEndBlock::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::SingleLineMethods::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::SingleLineMethods::NOT_SUPPORTED_ENDLESS_METHOD_BODY_TYPES = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::SlicingWithRange::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::SlicingWithRange::MSG_USELESS_RANGE = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::SlicingWithRange::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::SoleNestedConditional::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::SpecialGlobalVars::BUILTIN_VARS = T.let(T.unsafe(nil), Hash)

RuboCop::Cop::Style::SpecialGlobalVars::ENGLISH_VARS = T.let(T.unsafe(nil), Hash)

RuboCop::Cop::Style::SpecialGlobalVars::LIBRARY_NAME = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::SpecialGlobalVars::MSG_BOTH = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::SpecialGlobalVars::MSG_ENGLISH = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::SpecialGlobalVars::MSG_REGULAR = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::SpecialGlobalVars::NON_ENGLISH_VARS = T.let(T.unsafe(nil), Set)

RuboCop::Cop::Style::SpecialGlobalVars::PERL_VARS = T.let(T.unsafe(nil), Hash)

RuboCop::Cop::Style::SpecialGlobalVars::STYLE_VARS_MAP = T.let(T.unsafe(nil), Hash)

RuboCop::Cop::Style::StabbyLambdaParentheses::MSG_NO_REQUIRE = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::StabbyLambdaParentheses::MSG_REQUIRE = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::StaticClass::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::StderrPuts::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::StderrPuts::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::StringChars::BAD_ARGUMENTS = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::StringChars::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::StringChars::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::StringConcatenation::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::StringConcatenation::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::StringHashKeys::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::StringLiterals::MSG_INCONSISTENT = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::StringMethods::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::Strip::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::Strip::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::StructInheritance::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::SuperArguments::ASSIGN_TYPES = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::SuperArguments::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::SuperArguments::MSG_INLINE_BLOCK = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::SuperWithArgsParentheses::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::SwapValues::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::SwapValues::SIMPLE_ASSIGNMENT_TYPES = T.let(T.unsafe(nil), Set)

RuboCop::Cop::Style::SymbolArray::ARRAY_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::SymbolArray::DELIMITERS = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::SymbolArray::PERCENT_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::SymbolArray::REDEFINABLE_OPERATORS = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::SymbolArray::SPECIAL_GVARS = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::SymbolLiteral::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::SymbolProc::LAMBDA_OR_PROC = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::SymbolProc::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::SymbolProc::SUPER_TYPES = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::TernaryParentheses::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::TernaryParentheses::MSG_COMPLEX = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::TernaryParentheses::NON_COMPLEX_TYPES = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::TernaryParentheses::VARIABLE_TYPES = T.let(T.unsafe(nil), Set)

RuboCop::Cop::Style::TopLevelMethodDefinition::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::TopLevelMethodDefinition::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::TrailingBodyOnClass::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::TrailingBodyOnMethodDefinition::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::TrailingBodyOnModule::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::TrailingCommaInBlockArgs::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::TrailingMethodEndStatement::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::TrailingUnderscoreVariable::DISALLOW = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::TrailingUnderscoreVariable::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::TrailingUnderscoreVariable::UNDERSCORE = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::TrivialAccessors::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::UnlessElse::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::UnlessLogicalOperators::FORBID_LOGICAL_OPERATORS = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::UnlessLogicalOperators::FORBID_MIXED_LOGICAL_OPERATORS = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::UnpackFirst::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::UnpackFirst::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::VariableInterpolation::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::WhenThen::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::WhileUntilDo::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::WhileUntilModifier::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::WordArray::ARRAY_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::WordArray::PERCENT_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::YAMLFileRead::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::YAMLFileRead::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::YodaCondition::ENFORCE_YODA_STYLES = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::YodaCondition::EQUALITY_ONLY_STYLES = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::YodaCondition::EQUALITY_OPERATORS = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::YodaCondition::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::YodaCondition::NONCOMMUTATIVE_OPERATORS = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::YodaCondition::PROGRAM_NAMES = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::YodaCondition::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Set)

RuboCop::Cop::Style::YodaCondition::REVERSE_COMPARISON = T.let(T.unsafe(nil), Hash)

RuboCop::Cop::Style::YodaExpression::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::YodaExpression::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::ZeroLengthPredicate::NONZERO_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::Style::ZeroLengthPredicate::RESTRICT_ON_SEND = T.let(T.unsafe(nil), Array)

RuboCop::Cop::Style::ZeroLengthPredicate::ZERO_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::SurroundingSpace::NO_SPACE_COMMAND = T.let(T.unsafe(nil), String)

RuboCop::Cop::SurroundingSpace::SINGLE_SPACE_REGEXP = T.let(T.unsafe(nil), Regexp)

RuboCop::Cop::SurroundingSpace::SPACE_COMMAND = T.let(T.unsafe(nil), String)

RuboCop::Cop::TrailingComma::MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::UncommunicativeName::CASE_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::UncommunicativeName::FORBIDDEN_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::UncommunicativeName::LENGTH_MSG = T.let(T.unsafe(nil), String)

RuboCop::Cop::UncommunicativeName::NUM_MSG = T.let(T.unsafe(nil), String)

module RuboCop::Cop::Util
  include ::RuboCop::PathUtil

  private

  # source://rubocop//lib/rubocop/cop/util.rb#39
  def add_parentheses(node, corrector); end

  # source://rubocop//lib/rubocop/cop/util.rb#60
  def any_descendant?(node, *types); end

  # source://rubocop//lib/rubocop/cop/util.rb#75
  def args_begin(node); end

  # source://rubocop//lib/rubocop/cop/util.rb#87
  def args_end(node); end

  # source://rubocop//lib/rubocop/cop/util.rb#108
  def begins_its_line?(range); end

  # This is a bad API
  #
  # source://rubocop//lib/rubocop/cop/util.rb#17
  def comment_line?(line_source); end

  # @deprecated Use `ProcessedSource#line_with_comment?`, `contains_comment?` or similar
  #
  # source://rubocop//lib/rubocop/cop/util.rb#22
  def comment_lines?(node); end

  # source://rubocop//lib/rubocop/cop/util.rb#206
  def compatible_external_encoding_for?(src); end

  # If converting a string to Ruby string literal source code, must
  # double quotes be used?
  #
  # source://rubocop//lib/rubocop/cop/util.rb#134
  def double_quotes_required?(string); end

  # source://rubocop//lib/rubocop/cop/util.rb#148
  def escape_string(string); end

  # Returns, for example, a bare `if` node if the given node is an `if`
  # with calls chained to the end of it.
  #
  # source://rubocop//lib/rubocop/cop/util.rb#118
  def first_part_of_call_chain(node); end

  # source://rubocop//lib/rubocop/cop/util.rb#210
  def include_or_equal?(source, target); end

  # source://rubocop//lib/rubocop/cop/util.rb#185
  def indent(node, offset: T.unsafe(nil)); end

  # source://rubocop//lib/rubocop/cop/util.rb#165
  def interpret_string_escapes(string); end

  # source://rubocop//lib/rubocop/cop/util.rb#169
  def line(node_or_range); end

  # source://rubocop//lib/rubocop/cop/util.rb#30
  def line_range(node); end

  # source://rubocop//lib/rubocop/cop/util.rb#144
  def needs_escaping?(string); end

  # source://rubocop//lib/rubocop/cop/util.rb#91
  def on_node(syms, sexp, excludes = T.unsafe(nil), &block); end

  # source://rubocop//lib/rubocop/cop/util.rb#34
  def parentheses?(node); end

  # source://rubocop//lib/rubocop/cop/util.rb#196
  def parse_regexp(text); end

  # source://rubocop//lib/rubocop/cop/util.rb#177
  def same_line?(node1, node2); end

  # source://rubocop//lib/rubocop/cop/util.rb#152
  def to_string_literal(string); end

  # source://rubocop//lib/rubocop/cop/util.rb#191
  def to_supported_styles(enforced_style); end

  # source://rubocop//lib/rubocop/cop/util.rb#161
  def trim_string_interpolation_escape_character(str); end

  class << self
    # source://rubocop//lib/rubocop/cop/util.rb#39
    def add_parentheses(node, corrector); end

    # @return [Boolean]
    #
    # source://rubocop//lib/rubocop/cop/util.rb#60
    def any_descendant?(node, *types); end

    # source://rubocop//lib/rubocop/cop/util.rb#75
    def args_begin(node); end

    # source://rubocop//lib/rubocop/cop/util.rb#87
    def args_end(node); end

    # @return [Boolean]
    #
    # source://rubocop//lib/rubocop/cop/util.rb#108
    def begins_its_line?(range); end

    # This is a bad API
    #
    # @return [Boolean]
    #
    # source://rubocop//lib/rubocop/cop/util.rb#17
    def comment_line?(line_source); end

    # @deprecated Use `ProcessedSource#line_with_comment?`, `contains_comment?` or similar
    # @return [Boolean]
    #
    # source://rubocop//lib/rubocop/cop/util.rb#22
    def comment_lines?(node); end

    # If converting a string to Ruby string literal source code, must
    # double quotes be used?
    #
    # @return [Boolean]
    #
    # source://rubocop//lib/rubocop/cop/util.rb#134
    def double_quotes_required?(string); end

    # source://rubocop//lib/rubocop/cop/util.rb#148
    def escape_string(string); end

    # Returns, for example, a bare `if` node if the given node is an `if`
    # with calls chained to the end of it.
    #
    # source://rubocop//lib/rubocop/cop/util.rb#118
    def first_part_of_call_chain(node); end

    # source://rubocop//lib/rubocop/cop/util.rb#185
    def indent(node, offset: T.unsafe(nil)); end

    # source://rubocop//lib/rubocop/cop/util.rb#165
    def interpret_string_escapes(string); end

    # source://rubocop//lib/rubocop/cop/util.rb#169
    def line(node_or_range); end

    # source://rubocop//lib/rubocop/cop/util.rb#30
    def line_range(node); end

    # @return [Boolean]
    #
    # source://rubocop//lib/rubocop/cop/util.rb#144
    def needs_escaping?(string); end

    # @yield [sexp]
    #
    # source://rubocop//lib/rubocop/cop/util.rb#91
    def on_node(syms, sexp, excludes = T.unsafe(nil), &block); end

    # @return [Boolean]
    #
    # source://rubocop//lib/rubocop/cop/util.rb#34
    def parentheses?(node); end

    # source://rubocop//lib/rubocop/cop/util.rb#196
    def parse_regexp(text); end

    # @return [Boolean]
    #
    # source://rubocop//lib/rubocop/cop/util.rb#177
    def same_line?(node1, node2); end

    # source://rubocop//lib/rubocop/cop/util.rb#152
    def to_string_literal(string); end

    # source://rubocop//lib/rubocop/cop/util.rb#191
    def to_supported_styles(enforced_style); end

    # source://rubocop//lib/rubocop/cop/util.rb#161
    def trim_string_interpolation_escape_character(str); end
  end
end

RuboCop::Cop::Util::LINE_BEGINS_REGEX_CACHE = T.let(T.unsafe(nil), Hash)

RuboCop::Cop::Util::LITERAL_REGEX = T.let(T.unsafe(nil), Regexp)

RuboCop::Cop::Util::MAX_LINE_BEGINS_REGEX_INDEX = T.let(T.unsafe(nil), Integer)

module RuboCop::Cop::Utils; end

class RuboCop::Cop::Utils::FormatString
  # @return [FormatString] a new instance of FormatString
  #
  # source://rubocop//lib/rubocop/cop/utils/format_string.rb#94
  def initialize(string); end

  # source://rubocop//lib/rubocop/cop/utils/format_string.rb#98
  def format_sequences; end

  # source://rubocop//lib/rubocop/cop/utils/format_string.rb#110
  def max_digit_dollar_num; end

  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/cop/utils/format_string.rb#106
  def named_interpolation?; end

  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/cop/utils/format_string.rb#102
  def valid?; end

  private

  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/cop/utils/format_string.rb#122
  def mixed_formats?; end

  # source://rubocop//lib/rubocop/cop/utils/format_string.rb#116
  def parse; end
end

RuboCop::Cop::Utils::FormatString::DIGIT_DOLLAR = T.let(T.unsafe(nil), Regexp)

RuboCop::Cop::Utils::FormatString::FLAG = T.let(T.unsafe(nil), Regexp)

class RuboCop::Cop::Utils::FormatString::FormatSequence
  # @return [FormatSequence] a new instance of FormatSequence
  #
  # source://rubocop//lib/rubocop/cop/utils/format_string.rb#50
  def initialize(match); end

  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/cop/utils/format_string.rb#66
  def annotated?; end

  # Returns the value of attribute arg_number.
  #
  # source://rubocop//lib/rubocop/cop/utils/format_string.rb#48
  def arg_number; end

  # Number of arguments required for the format sequence
  #
  # source://rubocop//lib/rubocop/cop/utils/format_string.rb#75
  def arity; end

  # Returns the value of attribute begin_pos.
  #
  # source://rubocop//lib/rubocop/cop/utils/format_string.rb#48
  def begin_pos; end

  # Returns the value of attribute end_pos.
  #
  # source://rubocop//lib/rubocop/cop/utils/format_string.rb#48
  def end_pos; end

  # Returns the value of attribute flags.
  #
  # source://rubocop//lib/rubocop/cop/utils/format_string.rb#48
  def flags; end

  # source://rubocop//lib/rubocop/cop/utils/format_string.rb#79
  def max_digit_dollar_num; end

  # Returns the value of attribute name.
  #
  # source://rubocop//lib/rubocop/cop/utils/format_string.rb#48
  def name; end

  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/cop/utils/format_string.rb#62
  def percent?; end

  # Returns the value of attribute precision.
  #
  # source://rubocop//lib/rubocop/cop/utils/format_string.rb#48
  def precision; end

  # source://rubocop//lib/rubocop/cop/utils/format_string.rb#83
  def style; end

  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/cop/utils/format_string.rb#70
  def template?; end

  # Returns the value of attribute type.
  #
  # source://rubocop//lib/rubocop/cop/utils/format_string.rb#48
  def type; end

  # Returns the value of attribute width.
  #
  # source://rubocop//lib/rubocop/cop/utils/format_string.rb#48
  def width; end
end

RuboCop::Cop::Utils::FormatString::INTERPOLATION = T.let(T.unsafe(nil), Regexp)

RuboCop::Cop::Utils::FormatString::NAME = T.let(T.unsafe(nil), Regexp)

RuboCop::Cop::Utils::FormatString::NUMBER = T.let(T.unsafe(nil), Regexp)

RuboCop::Cop::Utils::FormatString::NUMBER_ARG = T.let(T.unsafe(nil), Regexp)

RuboCop::Cop::Utils::FormatString::PRECISION = T.let(T.unsafe(nil), Regexp)

RuboCop::Cop::Utils::FormatString::SEQUENCE = T.let(T.unsafe(nil), Regexp)

RuboCop::Cop::Utils::FormatString::TEMPLATE_NAME = T.let(T.unsafe(nil), Regexp)

RuboCop::Cop::Utils::FormatString::TYPE = T.let(T.unsafe(nil), Regexp)

RuboCop::Cop::Utils::FormatString::WIDTH = T.let(T.unsafe(nil), Regexp)

RuboCop::Cop::VariableForce::ARGUMENT_DECLARATION_TYPES = T.let(T.unsafe(nil), Array)

RuboCop::Cop::VariableForce::Assignment::MULTIPLE_LEFT_HAND_SIDE_TYPE = T.let(T.unsafe(nil), Symbol)

RuboCop::Cop::VariableForce::Branch::CLASSES_BY_TYPE = T.let(T.unsafe(nil), Hash)

RuboCop::Cop::VariableForce::LOGICAL_OPERATOR_ASSIGNMENT_TYPES = T.let(T.unsafe(nil), Array)

RuboCop::Cop::VariableForce::LOOP_TYPES = T.let(T.unsafe(nil), Array)

RuboCop::Cop::VariableForce::MULTIPLE_ASSIGNMENT_TYPE = T.let(T.unsafe(nil), Symbol)

RuboCop::Cop::VariableForce::NODE_HANDLER_METHOD_NAMES = T.let(T.unsafe(nil), Hash)

RuboCop::Cop::VariableForce::OPERATOR_ASSIGNMENT_TYPES = T.let(T.unsafe(nil), Array)

RuboCop::Cop::VariableForce::PATTERN_MATCH_VARIABLE_TYPE = T.let(T.unsafe(nil), Symbol)

RuboCop::Cop::VariableForce::POST_CONDITION_LOOP_TYPES = T.let(T.unsafe(nil), Array)

RuboCop::Cop::VariableForce::REGEXP_NAMED_CAPTURE_TYPE = T.let(T.unsafe(nil), Symbol)

RuboCop::Cop::VariableForce::RESCUE_TYPE = T.let(T.unsafe(nil), Symbol)

RuboCop::Cop::VariableForce::REST_ASSIGNMENT_TYPE = T.let(T.unsafe(nil), Symbol)

RuboCop::Cop::VariableForce::Reference::VARIABLE_REFERENCE_TYPES = T.let(T.unsafe(nil), Array)

RuboCop::Cop::VariableForce::SCOPE_TYPES = T.let(T.unsafe(nil), Array)

RuboCop::Cop::VariableForce::SEND_TYPE = T.let(T.unsafe(nil), Symbol)

RuboCop::Cop::VariableForce::Scope::OUTER_SCOPE_CHILD_INDICES = T.let(T.unsafe(nil), Hash)

RuboCop::Cop::VariableForce::TWISTED_SCOPE_TYPES = T.let(T.unsafe(nil), Array)

RuboCop::Cop::VariableForce::VARIABLE_ASSIGNMENT_TYPE = T.let(T.unsafe(nil), Symbol)

RuboCop::Cop::VariableForce::VARIABLE_ASSIGNMENT_TYPES = T.let(T.unsafe(nil), Array)

RuboCop::Cop::VariableForce::VARIABLE_REFERENCE_TYPE = T.let(T.unsafe(nil), Symbol)

RuboCop::Cop::VariableForce::Variable::VARIABLE_DECLARATION_TYPES = T.let(T.unsafe(nil), Array)

RuboCop::Cop::VariableForce::ZERO_ARITY_SUPER_TYPE = T.let(T.unsafe(nil), Symbol)

RuboCop::Cop::VisibilityHelp::VISIBILITY_SCOPES = T.let(T.unsafe(nil), Set)

class RuboCop::DirectiveComment
  # @return [DirectiveComment] a new instance of DirectiveComment
  #
  # source://rubocop//lib/rubocop/directive_comment.rb#46
  def initialize(comment, cop_registry = T.unsafe(nil)); end

  # Checks if all cops specified in this directive
  #
  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/directive_comment.rb#115
  def all_cops?; end

  # Returns the value of attribute comment.
  #
  # source://rubocop//lib/rubocop/directive_comment.rb#44
  def comment; end

  # Returns array of specified in this directive cop names
  #
  # source://rubocop//lib/rubocop/directive_comment.rb#120
  def cop_names; end

  # Returns the value of attribute cop_registry.
  #
  # source://rubocop//lib/rubocop/directive_comment.rb#44
  def cop_registry; end

  # Returns the value of attribute cops.
  #
  # source://rubocop//lib/rubocop/directive_comment.rb#44
  def cops; end

  # Returns array of specified in this directive department names
  # when all department disabled
  #
  # source://rubocop//lib/rubocop/directive_comment.rb#131
  def department_names; end

  # source://rubocop//lib/rubocop/directive_comment.rb#145
  def directive_count; end

  # Checks if this directive disables cops
  #
  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/directive_comment.rb#95
  def disabled?; end

  # Checks if this directive disables all cops
  #
  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/directive_comment.rb#110
  def disabled_all?; end

  # Checks if this directive enables cops
  #
  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/directive_comment.rb#100
  def enabled?; end

  # Checks if this directive enables all cops
  #
  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/directive_comment.rb#105
  def enabled_all?; end

  # Checks if directive departments include cop
  #
  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/directive_comment.rb#136
  def in_directive_department?(cop); end

  # Returns line number for directive
  #
  # source://rubocop//lib/rubocop/directive_comment.rb#150
  def line_number; end

  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/directive_comment.rb#59
  def malformed?; end

  # Checks if this directive contains all the given cop names
  #
  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/directive_comment.rb#77
  def match?(cop_names); end

  # Returns match captures to directive comment pattern
  #
  # source://rubocop//lib/rubocop/directive_comment.rb#90
  def match_captures; end

  # Checks if the directive comment is missing a cop name
  #
  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/directive_comment.rb#67
  def missing_cop_name?; end

  # Returns the value of attribute mode.
  #
  # source://rubocop//lib/rubocop/directive_comment.rb#44
  def mode; end

  # Checks if cop department has already used in directive comment
  #
  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/directive_comment.rb#141
  def overridden_by_department?(cop); end

  # source://rubocop//lib/rubocop/directive_comment.rb#81
  def range; end

  # Returns an array of cops for this directive comment, without resolving departments
  #
  # source://rubocop//lib/rubocop/directive_comment.rb#125
  def raw_cop_names; end

  # Checks if this directive relates to single line
  #
  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/directive_comment.rb#72
  def single_line?; end

  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/directive_comment.rb#54
  def start_with_marker?; end

  private

  # source://rubocop//lib/rubocop/directive_comment.rb#167
  def all_cop_names; end

  # source://rubocop//lib/rubocop/directive_comment.rb#171
  def cop_names_for_department(department); end

  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/directive_comment.rb#163
  def department?(name); end

  # source://rubocop//lib/rubocop/directive_comment.rb#176
  def exclude_lint_department_cops(cops); end

  # source://rubocop//lib/rubocop/directive_comment.rb#156
  def parsed_cop_names; end

  class << self
    # source://rubocop//lib/rubocop/directive_comment.rb#40
    def before_comment(line); end
  end
end

RuboCop::DirectiveComment::AVAILABLE_MODES = T.let(T.unsafe(nil), Array)

RuboCop::DirectiveComment::COPS_PATTERN = T.let(T.unsafe(nil), String)

RuboCop::DirectiveComment::COP_NAMES_PATTERN = T.let(T.unsafe(nil), String)

RuboCop::DirectiveComment::COP_NAME_PATTERN = T.let(T.unsafe(nil), String)

RuboCop::DirectiveComment::DIRECTIVE_COMMENT_REGEXP = T.let(T.unsafe(nil), Regexp)

RuboCop::DirectiveComment::DIRECTIVE_HEADER_PATTERN = T.let(T.unsafe(nil), String)

RuboCop::DirectiveComment::DIRECTIVE_MARKER_PATTERN = T.let(T.unsafe(nil), String)

RuboCop::DirectiveComment::DIRECTIVE_MARKER_REGEXP = T.let(T.unsafe(nil), Regexp)

RuboCop::DirectiveComment::LINT_DEPARTMENT = T.let(T.unsafe(nil), String)

RuboCop::DirectiveComment::LINT_REDUNDANT_DIRECTIVE_COP = T.let(T.unsafe(nil), String)

RuboCop::DirectiveComment::LINT_SYNTAX_COP = T.let(T.unsafe(nil), String)

RuboCop::DirectiveComment::MALFORMED_DIRECTIVE_WITHOUT_COP_NAME_REGEXP = T.let(T.unsafe(nil), Regexp)

RuboCop::DirectiveComment::TRAILING_COMMENT_MARKER = T.let(T.unsafe(nil), String)

class RuboCop::Error < ::StandardError; end

class RuboCop::ErrorWithAnalyzedFileLocation < ::RuboCop::Error
  # @return [ErrorWithAnalyzedFileLocation] a new instance of ErrorWithAnalyzedFileLocation
  #
  # source://rubocop//lib/rubocop/error.rb#14
  def initialize(cause:, node:, cop:); end

  # Returns the value of attribute cause.
  #
  # source://rubocop//lib/rubocop/error.rb#21
  def cause; end

  # source://rubocop//lib/rubocop/error.rb#27
  def column; end

  # Returns the value of attribute cop.
  #
  # source://rubocop//lib/rubocop/error.rb#21
  def cop; end

  # source://rubocop//lib/rubocop/error.rb#23
  def line; end

  # source://rubocop//lib/rubocop/error.rb#31
  def message; end
end

module RuboCop::ExcludeLimit
  # Sets up a configuration option to have an exclude limit tracked.
  # The parameter name given is transformed into a method name (eg. `Max`
  # becomes `self.max=` and `MinDigits` becomes `self.min_digits=`).
  #
  # source://rubocop//lib/rubocop/cop/exclude_limit.rb#10
  def exclude_limit(parameter_name, method_name: T.unsafe(nil)); end

  private

  # source://rubocop//lib/rubocop/cop/exclude_limit.rb#22
  def transform(parameter_name); end
end

module RuboCop::Ext::Comment
  # source://rubocop//lib/rubocop/ext/comment.rb#7
  def source; end

  # source://rubocop//lib/rubocop/ext/comment.rb#11
  def source_range; end
end

module RuboCop::Ext::ProcessedSource
  # source://rubocop//lib/rubocop/ext/processed_source.rb#9
  def comment_config; end

  # Returns the value of attribute config.
  #
  # source://rubocop//lib/rubocop/ext/processed_source.rb#7
  def config; end

  # Sets the attribute config
  #
  # @param value the value to set the attribute config to.
  #
  # source://rubocop//lib/rubocop/ext/processed_source.rb#7
  def config=(_arg0); end

  # source://rubocop//lib/rubocop/ext/processed_source.rb#13
  def disabled_line_ranges; end

  # Returns the value of attribute registry.
  #
  # source://rubocop//lib/rubocop/ext/processed_source.rb#7
  def registry; end

  # Sets the attribute registry
  #
  # @param value the value to set the attribute registry to.
  #
  # source://rubocop//lib/rubocop/ext/processed_source.rb#7
  def registry=(_arg0); end
end

module RuboCop::Ext::Range
  # Adds `Range#single_line?` to parallel `Node#single_line?`
  #
  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/ext/range.rb#8
  def single_line?; end
end

RuboCop::Ext::RegexpNode::ANY = T.let(T.unsafe(nil), Object)

module RuboCop::FileFinder
  # @api private
  #
  # source://rubocop//lib/rubocop/file_finder.rb#13
  def find_file_upwards(filename, start_dir, stop_dir = T.unsafe(nil)); end

  # @api private
  #
  # source://rubocop//lib/rubocop/file_finder.rb#20
  def find_last_file_upwards(filename, start_dir, stop_dir = T.unsafe(nil)); end

  # @api private
  #
  # source://rubocop//lib/rubocop/file_finder.rb#26
  def traverse_directories_upwards(start_dir, stop_dir = T.unsafe(nil)); end

  private

  # @api private
  #
  # source://rubocop//lib/rubocop/file_finder.rb#36
  def traverse_files_upwards(filename, start_dir, stop_dir); end

  class << self
    # @api private
    #
    # source://rubocop//lib/rubocop/file_finder.rb#10
    def root_level; end

    # @api private
    #
    # source://rubocop//lib/rubocop/file_finder.rb#10
    def root_level=(_arg0); end
  end
end

RuboCop::Formatter::ClangStyleFormatter::ELLIPSES = T.let(T.unsafe(nil), String)

RuboCop::Formatter::DisabledConfigFormatter::HEADING = T.let(T.unsafe(nil), String)

RuboCop::Formatter::FormatterSet::BUILTIN_FORMATTERS_FOR_KEYS = T.let(T.unsafe(nil), Hash)

RuboCop::Formatter::FormatterSet::BUILTIN_FORMATTER_NAMES = T.let(T.unsafe(nil), Array)

RuboCop::Formatter::FormatterSet::FORMATTER_APIS = T.let(T.unsafe(nil), Array)

RuboCop::Formatter::FuubarStyleFormatter::RESET_SEQUENCE = T.let(T.unsafe(nil), String)

RuboCop::Formatter::GitHubActionsFormatter::ESCAPE_MAP = T.let(T.unsafe(nil), Hash)

RuboCop::Formatter::HTMLFormatter::CSSContext::SEVERITY_COLORS = T.let(T.unsafe(nil), Hash)

RuboCop::Formatter::HTMLFormatter::CSS_PATH = T.let(T.unsafe(nil), String)

RuboCop::Formatter::HTMLFormatter::ELLIPSES = T.let(T.unsafe(nil), String)

RuboCop::Formatter::HTMLFormatter::ERBContext::LOGO_IMAGE_PATH = T.let(T.unsafe(nil), String)

RuboCop::Formatter::HTMLFormatter::TEMPLATE_PATH = T.let(T.unsafe(nil), String)

RuboCop::Formatter::JUnitFormatter::ESCAPE_MAP = T.let(T.unsafe(nil), Hash)

RuboCop::Formatter::PacmanFormatter::FALLBACK_TERMINAL_WIDTH = T.let(T.unsafe(nil), Integer)

RuboCop::Formatter::PacmanFormatter::GHOST = T.let(T.unsafe(nil), String)

RuboCop::Formatter::PacmanFormatter::PACDOT = T.let(T.unsafe(nil), Rainbow::Presenter)

RuboCop::Formatter::PacmanFormatter::PACMAN = T.let(T.unsafe(nil), Rainbow::Presenter)

RuboCop::Formatter::ProgressFormatter::DOT = T.let(T.unsafe(nil), String)

RuboCop::Formatter::SimpleTextFormatter::COLOR_FOR_SEVERITY = T.let(T.unsafe(nil), Hash)

module RuboCop::Formatter::TextUtil
  private

  # source://rubocop//lib/rubocop/formatter/text_util.rb#9
  def pluralize(number, thing, options = T.unsafe(nil)); end

  class << self
    # source://rubocop//lib/rubocop/formatter/text_util.rb#9
    def pluralize(number, thing, options = T.unsafe(nil)); end
  end
end

RuboCop::MagicComment::EmacsComment::FORMAT = T.let(T.unsafe(nil), String)

RuboCop::MagicComment::EmacsComment::OPERATOR = T.let(T.unsafe(nil), String)

RuboCop::MagicComment::EmacsComment::REGEXP = T.let(T.unsafe(nil), Regexp)

RuboCop::MagicComment::EmacsComment::SEPARATOR = T.let(T.unsafe(nil), String)

RuboCop::MagicComment::KEYWORDS = T.let(T.unsafe(nil), Hash)

RuboCop::MagicComment::SimpleComment::FSTRING_LITERAL_COMMENT = T.let(T.unsafe(nil), String)

RuboCop::MagicComment::TOKEN = T.let(T.unsafe(nil), String)

RuboCop::MagicComment::VimComment::FORMAT = T.let(T.unsafe(nil), String)

RuboCop::MagicComment::VimComment::KEYWORDS = T.let(T.unsafe(nil), Hash)

RuboCop::MagicComment::VimComment::OPERATOR = T.let(T.unsafe(nil), String)

RuboCop::MagicComment::VimComment::REGEXP = T.let(T.unsafe(nil), Regexp)

RuboCop::MagicComment::VimComment::SEPARATOR = T.let(T.unsafe(nil), String)

RuboCop::NodePattern = RuboCop::AST::NodePattern

class RuboCop::Options
  # @api private
  # @return [Options] a new instance of Options
  #
  # source://rubocop//lib/rubocop/options.rb#22
  def initialize; end

  # @api private
  #
  # source://rubocop//lib/rubocop/options.rb#27
  def parse(command_line_args); end

  private

  # @api private
  #
  # source://rubocop//lib/rubocop/options.rb#229
  def add_additional_modes(opts); end

  # the autocorrect command-line arguments map to the autocorrect @options values like so:
  #                            :fix_layout  :autocorrect  :safe_autocorrect  :autocorrect_all
  # -x, --fix-layout           true         true          -                  -
  # -a, --auto-correct         -            true          true               -
  #     --safe-auto-correct    -            true          true               -
  # -A, --auto-correct-all     -            true          -                  true
  #
  # @api private
  #
  # source://rubocop//lib/rubocop/options.rb#140
  def add_autocorrection_options(opts); end

  # @api private
  #
  # source://rubocop//lib/rubocop/options.rb#205
  def add_cache_options(opts); end

  # @api private
  #
  # source://rubocop//lib/rubocop/options.rb#73
  def add_check_options(opts); end

  # @api private
  #
  # source://rubocop//lib/rubocop/options.rb#163
  def add_config_generation_options(opts); end

  # @api private
  #
  # source://rubocop//lib/rubocop/options.rb#181
  def add_cop_selection_csv_option(option, opts); end

  # @api private
  #
  # source://rubocop//lib/rubocop/options.rb#241
  def add_general_options(opts); end

  # @api private
  #
  # source://rubocop//lib/rubocop/options.rb#212
  def add_lsp_option(opts); end

  # @api private
  #
  # source://rubocop//lib/rubocop/options.rb#105
  def add_output_options(opts); end

  # @api private
  #
  # source://rubocop//lib/rubocop/options.rb#254
  def add_profile_options(opts); end

  # @api private
  #
  # source://rubocop//lib/rubocop/options.rb#218
  def add_server_options(opts); end

  # @api private
  #
  # source://rubocop//lib/rubocop/options.rb#196
  def add_severity_option(opts); end

  # @api private
  #
  # source://rubocop//lib/rubocop/options.rb#53
  def define_options; end

  # @api private
  #
  # source://rubocop//lib/rubocop/options.rb#264
  def handle_deprecated_option(old_option, new_option); end

  # Finds the option in `args` starting with -- and converts it to a symbol,
  # e.g. [..., '--autocorrect', ...] to :autocorrect.
  #
  # @api private
  #
  # source://rubocop//lib/rubocop/options.rb#298
  def long_opt_symbol(args); end

  # Sets a value in the @options hash, based on the given long option and its
  # value, in addition to calling the block if a block is given.
  #
  # @api private
  #
  # source://rubocop//lib/rubocop/options.rb#287
  def option(opts, *args); end

  # @api private
  #
  # source://rubocop//lib/rubocop/options.rb#303
  def plugin_feature(file); end

  # @api private
  #
  # source://rubocop//lib/rubocop/options.rb#269
  def rainbow; end

  # @api private
  #
  # source://rubocop//lib/rubocop/options.rb#309
  def require_feature(file); end

  # Creates a section of options in order to separate them visually when
  # using `--help`.
  #
  # @api private
  #
  # source://rubocop//lib/rubocop/options.rb#279
  def section(opts, heading, &_block); end
end

RuboCop::Options::DEFAULT_MAXIMUM_EXCLUSION_ITEMS = T.let(T.unsafe(nil), Integer)

RuboCop::Options::EXITING_OPTIONS = T.let(T.unsafe(nil), Array)

RuboCop::Options::E_STDIN_NO_PATH = T.let(T.unsafe(nil), String)

module RuboCop::OptionsHelp; end

RuboCop::OptionsHelp::FORMATTER_OPTION_LIST = T.let(T.unsafe(nil), Array)

RuboCop::OptionsHelp::MAX_EXCL = T.let(T.unsafe(nil), String)

RuboCop::OptionsHelp::TEXT = T.let(T.unsafe(nil), Hash)

class RuboCop::OptionsValidator
  # @api private
  # @return [OptionsValidator] a new instance of OptionsValidator
  #
  # source://rubocop//lib/rubocop/options.rb#365
  def initialize(options); end

  # @api private
  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/options.rb#486
  def boolean_or_empty_cache?; end

  # @api private
  #
  # source://rubocop//lib/rubocop/options.rb#456
  def disable_parallel_when_invalid_option_combo; end

  # @api private
  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/options.rb#482
  def except_syntax?; end

  # @api private
  #
  # source://rubocop//lib/rubocop/options.rb#490
  def incompatible_options; end

  # @api private
  #
  # source://rubocop//lib/rubocop/options.rb#469
  def invalid_arguments_for_parallel; end

  # @api private
  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/options.rb#477
  def only_includes_redundant_disable?; end

  # @api private
  #
  # source://rubocop//lib/rubocop/options.rb#397
  def validate_auto_gen_config; end

  # @api private
  # @raise [OptionArgumentError]
  #
  # source://rubocop//lib/rubocop/options.rb#442
  def validate_autocorrect; end

  # @api private
  # @raise [OptionArgumentError]
  #
  # source://rubocop//lib/rubocop/options.rb#502
  def validate_cache_enabled_for_cache_root; end

  # @api private
  # @raise [OptionArgumentError]
  #
  # source://rubocop//lib/rubocop/options.rb#374
  def validate_compatibility; end

  # @api private
  #
  # source://rubocop//lib/rubocop/options.rb#369
  def validate_cop_options; end

  # @api private
  # @raise [OptionArgumentError]
  #
  # source://rubocop//lib/rubocop/options.rb#418
  def validate_display_only_correctable_and_autocorrect; end

  # @api private
  # @raise [OptionArgumentError]
  #
  # source://rubocop//lib/rubocop/options.rb#410
  def validate_display_only_failed; end

  # @api private
  # @raise [OptionArgumentError]
  #
  # source://rubocop//lib/rubocop/options.rb#427
  def validate_display_only_failed_and_display_only_correctable; end

  # @api private
  # @raise [OptionParser::MissingArgument]
  #
  # source://rubocop//lib/rubocop/options.rb#494
  def validate_exclude_limit_option; end

  # @api private
  # @raise [OptionArgumentError]
  #
  # source://rubocop//lib/rubocop/options.rb#436
  def validate_lsp_and_editor_mode; end

  class << self
    # Cop name validation must be done later than option parsing, so it's not
    # called from within Options.
    #
    # @api private
    #
    # source://rubocop//lib/rubocop/options.rb#334
    def validate_cop_list(names); end

    private

    # @api private
    #
    # source://rubocop//lib/rubocop/options.rb#351
    def format_message_from(name, cop_names); end
  end
end

RuboCop::PathUtil::HIDDEN_FILE_PATTERN = T.let(T.unsafe(nil), String)

RuboCop::PathUtil::SMART_PATH_CACHE = T.let(T.unsafe(nil), Hash)

RuboCop::Plugin::BUILTIN_INTERNAL_PLUGINS = T.let(T.unsafe(nil), Hash)

RuboCop::Plugin::INTERNAL_AFFAIRS_PLUGIN_NAME = T.let(T.unsafe(nil), String)

RuboCop::Plugin::Loader::DEFAULT_PLUGIN_CONFIG = T.let(T.unsafe(nil), Hash)

RuboCop::Plugin::OBSOLETE_INTERNAL_AFFAIRS_PLUGIN_NAME = T.let(T.unsafe(nil), String)

RuboCop::ProcessedSource = RuboCop::AST::ProcessedSource

RuboCop::RSpec::ExpectOffense::AnnotatedSource::ABBREV = T.let(T.unsafe(nil), String)

RuboCop::RSpec::ExpectOffense::AnnotatedSource::ANNOTATION_PATTERN = T.let(T.unsafe(nil), Regexp)

RuboCop::RemoteConfig::CACHE_LIFETIME = T.let(T.unsafe(nil), Integer)

class RuboCop::ResultCache
  # @api private
  # @return [ResultCache] a new instance of ResultCache
  #
  # source://rubocop//lib/rubocop/result_cache.rb#87
  def initialize(file, team, options, config_store, cache_root_override = T.unsafe(nil)); end

  # @api private
  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/result_cache.rb#100
  def debug?; end

  # @api private
  #
  # source://rubocop//lib/rubocop/result_cache.rb#108
  def load; end

  # @api private
  #
  # source://rubocop//lib/rubocop/result_cache.rb#85
  def path; end

  # @api private
  #
  # source://rubocop//lib/rubocop/result_cache.rb#113
  def save(offenses); end

  # @api private
  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/result_cache.rb#104
  def valid?; end

  private

  # @api private
  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/result_cache.rb#146
  def any_symlink?(path); end

  # We combine team and options into a single "context" checksum to avoid
  # making file names that are too long for some filesystems to handle.
  # This context is for anything that's not (1) the RuboCop executable
  # checksum or (2) the inspected file checksum.
  #
  # @api private
  #
  # source://rubocop//lib/rubocop/result_cache.rb#229
  def context_checksum(team, options); end

  # @api private
  #
  # source://rubocop//lib/rubocop/result_cache.rb#189
  def digest(path); end

  # @api private
  #
  # source://rubocop//lib/rubocop/result_cache.rb#157
  def file_checksum(file, config_store); end

  # Return a hash of the options given at invocation, minus the ones that have
  # no effect on which offenses and disabled line ranges are found, and thus
  # don't affect caching.
  #
  # @api private
  #
  # source://rubocop//lib/rubocop/result_cache.rb#220
  def relevant_options_digest(options); end

  # The checksum of the RuboCop program running the inspection.
  #
  # @api private
  #
  # source://rubocop//lib/rubocop/result_cache.rb#174
  def rubocop_checksum; end

  # @api private
  #
  # source://rubocop//lib/rubocop/result_cache.rb#200
  def rubocop_extra_features; end

  # @api private
  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/result_cache.rb#142
  def symlink_protection_triggered?(path); end

  class << self
    # @api private
    # @return [Boolean]
    #
    # source://rubocop//lib/rubocop/result_cache.rb#81
    def allow_symlinks_in_cache_location?(config_store); end

    # @api private
    #
    # source://rubocop//lib/rubocop/result_cache.rb#75
    def cache_root(config_store, cache_root_override = T.unsafe(nil)); end

    # Remove old files so that the cache doesn't grow too big. When the
    # threshold MaxFilesInCache has been exceeded, the oldest 50% of all the
    # files in the cache are removed. The reason for removing so much is that
    # cleaning should be done relatively seldom, since there is a slight risk
    # that some other RuboCop process was just about to read the file, when
    # there's parallel execution and the cache is shared.
    #
    # @api private
    #
    # source://rubocop//lib/rubocop/result_cache.rb#28
    def cleanup(config_store, verbose, cache_root_override = T.unsafe(nil)); end

    # @api private
    #
    # source://rubocop//lib/rubocop/result_cache.rb#170
    def inhibit_cleanup; end

    # @api private
    #
    # source://rubocop//lib/rubocop/result_cache.rb#170
    def inhibit_cleanup=(_arg0); end

    # @api private
    #
    # source://rubocop//lib/rubocop/result_cache.rb#42
    def rubocop_required_features; end

    # @api private
    #
    # source://rubocop//lib/rubocop/result_cache.rb#42
    def rubocop_required_features=(_arg0); end

    # @api private
    #
    # source://rubocop//lib/rubocop/result_cache.rb#170
    def source_checksum; end

    # @api private
    #
    # source://rubocop//lib/rubocop/result_cache.rb#170
    def source_checksum=(_arg0); end

    private

    # @api private
    #
    # source://rubocop//lib/rubocop/result_cache.rb#65
    def remove_files(files, dirs, remove_count); end

    # @api private
    #
    # source://rubocop//lib/rubocop/result_cache.rb#52
    def remove_oldest_files(files, dirs, rubocop_cache_dir, verbose); end

    # @api private
    # @return [Boolean]
    #
    # source://rubocop//lib/rubocop/result_cache.rb#48
    def requires_file_removal?(file_count, config_store); end
  end
end

RuboCop::ResultCache::DL_EXTENSIONS = T.let(T.unsafe(nil), Array)

RuboCop::ResultCache::NON_CHANGING = T.let(T.unsafe(nil), Array)

class RuboCop::Runner
  # @return [Runner] a new instance of Runner
  #
  # source://rubocop//lib/rubocop/runner.rb#59
  def initialize(options, config_store); end

  # Sets the attribute aborting
  #
  # @param value the value to set the attribute aborting to.
  #
  # source://rubocop//lib/rubocop/runner.rb#57
  def aborting=(_arg0); end

  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/runner.rb#83
  def aborting?; end

  # Returns the value of attribute errors.
  #
  # source://rubocop//lib/rubocop/runner.rb#56
  def errors; end

  # source://rubocop-md/2.0.1/lib/rubocop/markdown/rubocop_ext.rb#50
  def file_finished(file, offenses); end

  # source://rubocop-md/2.0.1/lib/rubocop/markdown/rubocop_ext.rb#44
  def file_offense_cache(file); end

  # source://rubocop-md/2.0.1/lib/rubocop/markdown/rubocop_ext.rb#36
  def get_processed_source(*args); end

  # source://rubocop//lib/rubocop/runner.rb#67
  def run(paths); end

  # Returns the value of attribute warnings.
  #
  # source://rubocop//lib/rubocop/runner.rb#56
  def warnings; end

  private

  # source://rubocop//lib/rubocop/runner.rb#199
  def add_redundant_disables(file, offenses, source); end

  # source://rubocop//lib/rubocop/runner.rb#173
  def cached_result(file, team); end

  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/runner.rb#253
  def cached_run?; end

  # Check whether a run created source identical to a previous run, which
  # means that we definitely have an infinite loop.
  #
  # source://rubocop//lib/rubocop/runner.rb#331
  def check_for_infinite_loop(processed_source, offenses_by_iteration); end

  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/runner.rb#225
  def check_for_redundant_disables?(source); end

  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/runner.rb#433
  def considered_failure?(offense); end

  # source://rubocop//lib/rubocop/runner.rb#470
  def default_config(cop_name); end

  # source://rubocop//lib/rubocop/runner.rb#275
  def do_inspection_loop(file); end

  # source://rubocop//lib/rubocop/runner.rb#133
  def each_inspected_file(files); end

  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/runner.rb#239
  def except_redundant_cop_disable_directive?; end

  # source://rubocop//lib/rubocop/runner.rb#360
  def extract_ruby_sources(processed_source); end

  # source://rubocop//lib/rubocop/runner.rb#165
  def file_offenses(file); end

  # source://rubocop//lib/rubocop/runner.rb#243
  def file_started(file); end

  # source://rubocop//lib/rubocop/runner.rb#413
  def filter_cop_classes(cop_classes, config); end

  # source://rubocop//lib/rubocop/runner.rb#104
  def find_target_files(paths); end

  # source://rubocop//lib/rubocop/runner.rb#424
  def formatter_set; end

  # source://rubocop//lib/rubocop/runner.rb#345
  def inspect_file(processed_source, team = T.unsafe(nil)); end

  # source://rubocop//lib/rubocop/runner.rb#115
  def inspect_files(files); end

  # source://rubocop//lib/rubocop/runner.rb#306
  def iterate_until_no_changes(source, offenses_by_iteration); end

  # source://rubocop//lib/rubocop/runner.rb#148
  def list_files(paths); end

  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/runner.rb#466
  def mark_as_safe_by_config?(config); end

  # source://rubocop//lib/rubocop/runner.rb#474
  def minimum_severity_to_fail; end

  # source://rubocop//lib/rubocop/runner.rb#374
  def mobilize_team(processed_source); end

  # source://rubocop//lib/rubocop/runner.rb#379
  def mobilized_cop_classes(config); end

  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/runner.rb#442
  def offense_displayed?(offense); end

  # source://rubocop//lib/rubocop/runner.rb#454
  def offenses_to_report(offenses); end

  # source://rubocop//lib/rubocop/runner.rb#152
  def process_file(file); end

  # source://rubocop//lib/rubocop/runner.rb#403
  def qualify_option_cop_names; end

  # @yield [cop]
  #
  # source://rubocop//lib/rubocop/runner.rb#231
  def redundant_cop_disable_directive(file); end

  # source://rubocop//lib/rubocop/runner.rb#265
  def save_in_cache(cache, offenses); end

  # A Cop::Team instance is stateful and may change when inspecting.
  # The "standby" team for a given config is an initialized but
  # otherwise dormant team that can be used for config- and option-
  # level caching in ResultCache.
  #
  # source://rubocop//lib/rubocop/runner.rb#517
  def standby_team(config); end

  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/runner.rb#420
  def style_guide_cops_only?(config); end

  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/runner.rb#458
  def supports_safe_autocorrect?(offense); end

  # @yield [team]
  #
  # source://rubocop//lib/rubocop/runner.rb#214
  def team_for_redundant_disables(file, offenses, source); end

  # Warms up the RuboCop cache by forking a suitable number of RuboCop
  # instances that each inspects its allotted group of files.
  #
  # source://rubocop//lib/rubocop/runner.rb#91
  def warm_cache(target_files); end

  class << self
    # @return [Array<#call>]
    #
    # source://rubocop//lib/rubocop/runner.rb#29
    def ruby_extractors; end

    private

    # @return [#call]
    #
    # source://rubocop//lib/rubocop/runner.rb#36
    def default_ruby_extractor; end
  end
end

class RuboCop::Runner::InfiniteCorrectionLoop < ::StandardError
  # @return [InfiniteCorrectionLoop] a new instance of InfiniteCorrectionLoop
  #
  # source://rubocop//lib/rubocop/runner.rb#14
  def initialize(path, offenses_by_iteration, loop_start: T.unsafe(nil)); end

  # Returns the value of attribute offenses.
  #
  # source://rubocop//lib/rubocop/runner.rb#12
  def offenses; end
end

RuboCop::Runner::MAX_ITERATIONS = T.let(T.unsafe(nil), Integer)

RuboCop::Runner::REDUNDANT_COP_DISABLE_DIRECTIVE_RULES = T.let(T.unsafe(nil), Array)

RuboCop::StringInterpreter::STRING_ESCAPES = T.let(T.unsafe(nil), Hash)

RuboCop::StringInterpreter::STRING_ESCAPE_REGEX = T.let(T.unsafe(nil), Regexp)

class RuboCop::TargetFinder
  # @api private
  # @return [TargetFinder] a new instance of TargetFinder
  #
  # source://rubocop//lib/rubocop/target_finder.rb#9
  def initialize(config_store, options = T.unsafe(nil)); end

  # Generate a list of target files by expanding globbing patterns (if any). If args is empty,
  # recursively find all Ruby source files under the current directory
  #
  # @api private
  # @return [Array] array of file paths
  #
  # source://rubocop//lib/rubocop/target_finder.rb#17
  def find(args, mode); end

  # Search for files recursively starting at the given base directory using the given flags that
  # determine how the match is made. Excluded files will be removed later by the caller, but as an
  # optimization find_files removes the top level directories that are excluded in configuration
  # in the normal way (dir/**/*).
  #
  # @api private
  #
  # source://rubocop//lib/rubocop/target_finder.rb#62
  def find_files(base_dir, flags); end

  # @api private
  # @return [Boolean]
  #
  # source://rubocop-md/2.0.1/lib/rubocop/markdown/rubocop_ext.rb#78
  def ruby_file?(file); end

  # Finds all Ruby source files under the current or other supplied directory. A Ruby source file
  # is defined as a file with the `.rb` extension or a file with no extension that has a ruby
  # shebang line as its first line.
  # It is possible to specify includes and excludes using the config file, so you can include
  # other Ruby files like Rakefiles and gemspecs.
  #
  # @api private
  # @param base_dir Root directory under which to search for
  #   ruby source files
  # @return [Array] Array of filenames
  #
  # source://rubocop//lib/rubocop/target_finder.rb#41
  def target_files_in_dir(base_dir = T.unsafe(nil)); end

  private

  # @api private
  #
  # source://rubocop//lib/rubocop/target_finder.rb#124
  def all_cops_include; end

  # @api private
  #
  # source://rubocop//lib/rubocop/target_finder.rb#110
  def combined_exclude_glob_patterns(base_dir); end

  # @api private
  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/target_finder.rb#177
  def configured_include?(file); end

  # @api private
  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/target_finder.rb#213
  def debug?; end

  # @api private
  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/target_finder.rb#217
  def fail_fast?; end

  # @api private
  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/target_finder.rb#205
  def force_exclusion?; end

  # @api private
  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/target_finder.rb#209
  def ignore_parent_exclusion?; end

  # @api private
  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/target_finder.rb#150
  def included_file?(file); end

  # @api private
  #
  # source://rubocop//lib/rubocop/target_finder.rb#196
  def order; end

  # @api private
  #
  # source://rubocop//lib/rubocop/target_finder.rb#128
  def process_explicit_path(path, mode); end

  # @api private
  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/target_finder.rb#181
  def ruby_executable?(file); end

  # @api private
  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/target_finder.rb#162
  def ruby_extension?(file); end

  # @api private
  #
  # source://rubocop//lib/rubocop/target_finder.rb#166
  def ruby_extensions; end

  # @api private
  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/target_finder.rb#173
  def ruby_filename?(file); end

  # @api private
  #
  # source://rubocop//lib/rubocop/target_finder.rb#117
  def ruby_filenames; end

  # @api private
  #
  # source://rubocop//lib/rubocop/target_finder.rb#192
  def ruby_interpreters(file); end

  # @api private
  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/target_finder.rb#158
  def stdin?; end

  # @api private
  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/target_finder.rb#102
  def symlink_excluded_or_infinite_loop?(base_dir, current_dir, exclude_pattern, flags); end

  # @api private
  # @return [Boolean]
  #
  # source://rubocop//lib/rubocop/target_finder.rb#77
  def to_inspect?(file, hidden_files, base_dir_config); end

  # @api private
  #
  # source://rubocop//lib/rubocop/target_finder.rb#86
  def wanted_dir_patterns(base_dir, exclude_pattern, flags); end

  # @api private
  #
  # source://rubocop//lib/rubocop/target_finder.rb#139
  def without_excluded(files); end
end

RuboCop::TargetFinder::HIDDEN_PATH_SUBSTRING = T.let(T.unsafe(nil), String)

RuboCop::TargetRuby::DEFAULT_VERSION = T.let(T.unsafe(nil), Float)

RuboCop::TargetRuby::KNOWN_RUBIES = T.let(T.unsafe(nil), Array)

RuboCop::TargetRuby::OBSOLETE_RUBIES = T.let(T.unsafe(nil), Hash)

RuboCop::TargetRuby::RubyVersionFile::RUBY_VERSION_FILENAME = T.let(T.unsafe(nil), String)

RuboCop::TargetRuby::RubyVersionFile::RUBY_VERSION_PATTERN = T.let(T.unsafe(nil), Regexp)

RuboCop::TargetRuby::SOURCES = T.let(T.unsafe(nil), Array)

RuboCop::TargetRuby::ToolVersionsFile::TOOL_VERSIONS_FILENAME = T.let(T.unsafe(nil), String)

RuboCop::TargetRuby::ToolVersionsFile::TOOL_VERSIONS_PATTERN = T.let(T.unsafe(nil), Regexp)

RuboCop::Token = RuboCop::AST::Token

module RuboCop::Version
  class << self
    # @api private
    #
    # source://rubocop//lib/rubocop/version.rb#121
    def config_for_pwd(env); end

    # @api private
    #
    # source://rubocop//lib/rubocop/version.rb#151
    def document_version; end

    # @api private
    #
    # source://rubocop//lib/rubocop/version.rb#74
    def extension_versions(env); end

    # Returns feature version in one of two ways:
    #
    # * Find by RuboCop core version style (e.g. rubocop-performance, rubocop-rspec)
    # * Find by `bundle gem` version style (e.g. rubocop-rake)
    #
    # @api private
    #
    # source://rubocop//lib/rubocop/version.rb#135
    def feature_version(feature); end

    # @api private
    #
    # source://rubocop//lib/rubocop/version.rb#57
    def parser_version(target_ruby_version); end

    # @api private
    #
    # source://rubocop//lib/rubocop/version.rb#156
    def server_mode; end

    # @api private
    #
    # source://rubocop//lib/rubocop/version.rb#112
    def target_ruby_version(env); end

    # @api private
    #
    # source://rubocop//lib/rubocop/version.rb#52
    def verbose(env: T.unsafe(nil)); end

    # NOTE: Marked as private but used by gems like standard.
    #
    # @api private
    #
    # source://rubocop//lib/rubocop/version.rb#26
    def version(debug: T.unsafe(nil), env: T.unsafe(nil)); end
  end
end

RuboCop::Version::CANONICAL_FEATURE_NAMES = T.let(T.unsafe(nil), Hash)

RuboCop::Version::EXTENSION_PATH_NAMES = T.let(T.unsafe(nil), Hash)

RuboCop::Version::MINIMUM_PARSABLE_PRISM_VERSION = T.let(T.unsafe(nil), Float)

RuboCop::Version::MSG = T.let(T.unsafe(nil), String)

RuboCop::Version::STRING = T.let(T.unsafe(nil), String)

